=begin
#SCORM Cloud Rest API

#REST API used for SCORM Cloud integrations.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'


module RusticiSoftwareCloudV2
  class ActivityResultSchema
    attr_accessor :id

    attr_accessor :title

    attr_accessor :attempts

    attr_accessor :activity_completion

    attr_accessor :activity_success

    attr_accessor :score

    attr_accessor :time_tracked

    attr_accessor :completion_amount

    attr_accessor :suspended

    attr_accessor :children

    attr_accessor :objectives

    attr_accessor :static_properties

    attr_accessor :runtime

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'title' => :'title',
        :'attempts' => :'attempts',
        :'activity_completion' => :'activityCompletion',
        :'activity_success' => :'activitySuccess',
        :'score' => :'score',
        :'time_tracked' => :'timeTracked',
        :'completion_amount' => :'completionAmount',
        :'suspended' => :'suspended',
        :'children' => :'children',
        :'objectives' => :'objectives',
        :'static_properties' => :'staticProperties',
        :'runtime' => :'runtime'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'title' => :'String',
        :'attempts' => :'Integer',
        :'activity_completion' => :'String',
        :'activity_success' => :'String',
        :'score' => :'ScoreSchema',
        :'time_tracked' => :'String',
        :'completion_amount' => :'CompletionAmountSchema',
        :'suspended' => :'BOOLEAN',
        :'children' => :'Array<ActivityResultSchema>',
        :'objectives' => :'Array<ObjectiveSchema>',
        :'static_properties' => :'StaticPropertiesSchema',
        :'runtime' => :'RuntimeSchema'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.has_key?(:'attempts')
        self.attempts = attributes[:'attempts']
      end

      if attributes.has_key?(:'activityCompletion')
        self.activity_completion = attributes[:'activityCompletion']
      end

      if attributes.has_key?(:'activitySuccess')
        self.activity_success = attributes[:'activitySuccess']
      end

      if attributes.has_key?(:'score')
        self.score = attributes[:'score']
      end

      if attributes.has_key?(:'timeTracked')
        self.time_tracked = attributes[:'timeTracked']
      end

      if attributes.has_key?(:'completionAmount')
        self.completion_amount = attributes[:'completionAmount']
      end

      if attributes.has_key?(:'suspended')
        self.suspended = attributes[:'suspended']
      end

      if attributes.has_key?(:'children')
        if (value = attributes[:'children']).is_a?(Array)
          self.children = value
        end
      end

      if attributes.has_key?(:'objectives')
        if (value = attributes[:'objectives']).is_a?(Array)
          self.objectives = value
        end
      end

      if attributes.has_key?(:'staticProperties')
        self.static_properties = attributes[:'staticProperties']
      end

      if attributes.has_key?(:'runtime')
        self.runtime = attributes[:'runtime']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    #
    # allowable_values = ['UNKNOWN', 'COMPLETED', 'INCOMPLETE']
    #
    # @param [Object] activity_completion Object to be assigned
    def activity_completion=(activity_completion)
      @activity_completion = activity_completion
    end
    # Custom attribute writer method checking allowed values (enum).
    #
    # allowable_values = ['UNKNOWN', 'PASSED', 'FAILED']
    #
    # @param [Object] activity_success Object to be assigned
    def activity_success=(activity_success)
      @activity_success = activity_success
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          title == o.title &&
          attempts == o.attempts &&
          activity_completion == o.activity_completion &&
          activity_success == o.activity_success &&
          score == o.score &&
          time_tracked == o.time_tracked &&
          completion_amount == o.completion_amount &&
          suspended == o.suspended &&
          children == o.children &&
          objectives == o.objectives &&
          static_properties == o.static_properties &&
          runtime == o.runtime
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, title, attempts, activity_completion, activity_success, score, time_tracked, completion_amount, suspended, children, objectives, static_properties, runtime].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = RusticiSoftwareCloudV2.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
