=begin
#SCORM Cloud Rest API

#REST API used for SCORM Cloud integrations.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'date'

module RusticiSoftwareCloudV2
  class RegistrationSchema
    attr_accessor :id

    attr_accessor :instance

    # xAPI registration id associated with this registration
    attr_accessor :xapi_registration_id

    # Dispatch ID for this registration, if applicable
    attr_accessor :dispatch_id

    attr_accessor :updated

    attr_accessor :registration_completion

    attr_accessor :registration_completion_amount

    attr_accessor :registration_success

    attr_accessor :score

    attr_accessor :total_seconds_tracked

    attr_accessor :first_access_date

    attr_accessor :last_access_date

    attr_accessor :completed_date

    attr_accessor :created_date

    attr_accessor :course

    attr_accessor :learner

    attr_accessor :tags

    attr_accessor :global_objectives

    attr_accessor :shared_data

    attr_accessor :suspended_activity_id

    attr_accessor :activity_details

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'instance' => :'instance',
        :'xapi_registration_id' => :'xapiRegistrationId',
        :'dispatch_id' => :'dispatchId',
        :'updated' => :'updated',
        :'registration_completion' => :'registrationCompletion',
        :'registration_completion_amount' => :'registrationCompletionAmount',
        :'registration_success' => :'registrationSuccess',
        :'score' => :'score',
        :'total_seconds_tracked' => :'totalSecondsTracked',
        :'first_access_date' => :'firstAccessDate',
        :'last_access_date' => :'lastAccessDate',
        :'completed_date' => :'completedDate',
        :'created_date' => :'createdDate',
        :'course' => :'course',
        :'learner' => :'learner',
        :'tags' => :'tags',
        :'global_objectives' => :'globalObjectives',
        :'shared_data' => :'sharedData',
        :'suspended_activity_id' => :'suspendedActivityId',
        :'activity_details' => :'activityDetails'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'instance' => :'Integer',
        :'xapi_registration_id' => :'String',
        :'dispatch_id' => :'String',
        :'updated' => :'DateTime',
        :'registration_completion' => :'RegistrationCompletion',
        :'registration_completion_amount' => :'Float',
        :'registration_success' => :'RegistrationSuccess',
        :'score' => :'ScoreSchema',
        :'total_seconds_tracked' => :'Float',
        :'first_access_date' => :'DateTime',
        :'last_access_date' => :'DateTime',
        :'completed_date' => :'DateTime',
        :'created_date' => :'DateTime',
        :'course' => :'CourseReferenceSchema',
        :'learner' => :'LearnerSchema',
        :'tags' => :'Array<String>',
        :'global_objectives' => :'Array<ObjectiveSchema>',
        :'shared_data' => :'Array<SharedDataEntrySchema>',
        :'suspended_activity_id' => :'String',
        :'activity_details' => :'ActivityResultSchema'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'instance')
        self.instance = attributes[:'instance']
      end

      if attributes.has_key?(:'xapiRegistrationId')
        self.xapi_registration_id = attributes[:'xapiRegistrationId']
      end

      if attributes.has_key?(:'dispatchId')
        self.dispatch_id = attributes[:'dispatchId']
      end

      if attributes.has_key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.has_key?(:'registrationCompletion')
        self.registration_completion = attributes[:'registrationCompletion']
      end

      if attributes.has_key?(:'registrationCompletionAmount')
        self.registration_completion_amount = attributes[:'registrationCompletionAmount']
      end

      if attributes.has_key?(:'registrationSuccess')
        self.registration_success = attributes[:'registrationSuccess']
      end

      if attributes.has_key?(:'score')
        self.score = attributes[:'score']
      end

      if attributes.has_key?(:'totalSecondsTracked')
        self.total_seconds_tracked = attributes[:'totalSecondsTracked']
      end

      if attributes.has_key?(:'firstAccessDate')
        self.first_access_date = attributes[:'firstAccessDate']
      end

      if attributes.has_key?(:'lastAccessDate')
        self.last_access_date = attributes[:'lastAccessDate']
      end

      if attributes.has_key?(:'completedDate')
        self.completed_date = attributes[:'completedDate']
      end

      if attributes.has_key?(:'createdDate')
        self.created_date = attributes[:'createdDate']
      end

      if attributes.has_key?(:'course')
        self.course = attributes[:'course']
      end

      if attributes.has_key?(:'learner')
        self.learner = attributes[:'learner']
      end

      if attributes.has_key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.has_key?(:'globalObjectives')
        if (value = attributes[:'globalObjectives']).is_a?(Array)
          self.global_objectives = value
        end
      end

      if attributes.has_key?(:'sharedData')
        if (value = attributes[:'sharedData']).is_a?(Array)
          self.shared_data = value
        end
      end

      if attributes.has_key?(:'suspendedActivityId')
        self.suspended_activity_id = attributes[:'suspendedActivityId']
      end

      if attributes.has_key?(:'activityDetails')
        self.activity_details = attributes[:'activityDetails']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end


    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          instance == o.instance &&
          xapi_registration_id == o.xapi_registration_id &&
          dispatch_id == o.dispatch_id &&
          updated == o.updated &&
          registration_completion == o.registration_completion &&
          registration_completion_amount == o.registration_completion_amount &&
          registration_success == o.registration_success &&
          score == o.score &&
          total_seconds_tracked == o.total_seconds_tracked &&
          first_access_date == o.first_access_date &&
          last_access_date == o.last_access_date &&
          completed_date == o.completed_date &&
          created_date == o.created_date &&
          course == o.course &&
          learner == o.learner &&
          tags == o.tags &&
          global_objectives == o.global_objectives &&
          shared_data == o.shared_data &&
          suspended_activity_id == o.suspended_activity_id &&
          activity_details == o.activity_details
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, instance, xapi_registration_id, dispatch_id, updated, registration_completion, registration_completion_amount, registration_success, score, total_seconds_tracked, first_access_date, last_access_date, completed_date, created_date, course, learner, tags, global_objectives, shared_data, suspended_activity_id, activity_details].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = RusticiSoftwareCloudV2.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
