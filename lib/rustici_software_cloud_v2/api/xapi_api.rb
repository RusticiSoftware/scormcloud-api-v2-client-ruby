=begin
#SCORM Cloud Rest API

#REST API used for SCORM Cloud integrations.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'uri'

module RusticiSoftwareCloudV2
  class XapiApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an xAPI Statement Pipe 
    # Creates an xAPI statement pipe.  >**Note:** >This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the creation of the xAPI statement pipe takes place. 
    # @param xapi_statement_pipe 
    # @param [Hash] opts the optional parameters
    # @return [StringResultSchema]
    def create_statement_pipe(xapi_statement_pipe, opts = {})
      data, _status_code, _headers = create_statement_pipe_with_http_info(xapi_statement_pipe, opts)
      data
    end

    # Create an xAPI Statement Pipe 
    # Creates an xAPI statement pipe.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the creation of the xAPI statement pipe takes place. 
    # @param xapi_statement_pipe 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringResultSchema, Fixnum, Hash)>] StringResultSchema data, response status code and response headers
    def create_statement_pipe_with_http_info(xapi_statement_pipe, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: XapiApi.create_statement_pipe ...'
      end
      # verify the required parameter 'xapi_statement_pipe' is set
      if xapi_statement_pipe.nil?
        fail ArgumentError, "Missing the required parameter 'xapi_statement_pipe' when calling XapiApi.create_statement_pipe"
      end
      # resource path
      local_var_path = '/xapi/statementPipes'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(xapi_statement_pipe)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StringResultSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: XapiApi#create_statement_pipe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create xAPI Credentials 
    # Creates an xAPI credential combination from the provided secret and a generated ID. 
    # @param xapi_credential 
    # @param [Hash] opts the optional parameters
    # @return [StringResultSchema]
    def create_xapi_credential(xapi_credential, opts = {})
      data, _status_code, _headers = create_xapi_credential_with_http_info(xapi_credential, opts)
      data
    end

    # Create xAPI Credentials 
    # Creates an xAPI credential combination from the provided secret and a generated ID. 
    # @param xapi_credential 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringResultSchema, Fixnum, Hash)>] StringResultSchema data, response status code and response headers
    def create_xapi_credential_with_http_info(xapi_credential, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: XapiApi.create_xapi_credential ...'
      end
      # verify the required parameter 'xapi_credential' is set
      if xapi_credential.nil?
        fail ArgumentError, "Missing the required parameter 'xapi_credential' when calling XapiApi.create_xapi_credential"
      end
      # resource path
      local_var_path = '/xapi/credentials'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(xapi_credential)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StringResultSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: XapiApi#create_xapi_credential\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an xAPI Statement Pipe 
    # Deletes the specified xAPI statement pipe  >**Note:** >This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the deletion takes place.  Recreating a statement pipe with the same ID too quickly could cause the statement pipe to end up in a faulty state. 
    # @param statement_pipe_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_statement_pipe(statement_pipe_id, opts = {})
      delete_statement_pipe_with_http_info(statement_pipe_id, opts)
      nil
    end

    # Delete an xAPI Statement Pipe 
    # Deletes the specified xAPI statement pipe  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the deletion takes place.  Recreating a statement pipe with the same ID too quickly could cause the statement pipe to end up in a faulty state. 
    # @param statement_pipe_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_statement_pipe_with_http_info(statement_pipe_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: XapiApi.delete_statement_pipe ...'
      end
      # verify the required parameter 'statement_pipe_id' is set
      if statement_pipe_id.nil?
        fail ArgumentError, "Missing the required parameter 'statement_pipe_id' when calling XapiApi.delete_statement_pipe"
      end
      # resource path
      local_var_path = '/xapi/statementPipes/{statementPipeId}'.sub('{' + 'statementPipeId' + '}', statement_pipe_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: XapiApi#delete_statement_pipe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete xAPI Credentials 
    # Deletes the specified xAPI credentials. 
    # @param xapi_credential_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_xapi_credential(xapi_credential_id, opts = {})
      delete_xapi_credential_with_http_info(xapi_credential_id, opts)
      nil
    end

    # Delete xAPI Credentials 
    # Deletes the specified xAPI credentials. 
    # @param xapi_credential_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_xapi_credential_with_http_info(xapi_credential_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: XapiApi.delete_xapi_credential ...'
      end
      # verify the required parameter 'xapi_credential_id' is set
      if xapi_credential_id.nil?
        fail ArgumentError, "Missing the required parameter 'xapi_credential_id' when calling XapiApi.delete_xapi_credential"
      end
      # resource path
      local_var_path = '/xapi/credentials/{xapiCredentialId}'.sub('{' + 'xapiCredentialId' + '}', xapi_credential_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: XapiApi#delete_xapi_credential\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get detailed information about an xAPI Statement Pipe 
    # Returns detailed information about the xAPI pipe.  This includes source and target urls, the last time a statement was successfully forwarded, and how many attempts have been made to send data to the target url. 
    # @param statement_pipe_id 
    # @param [Hash] opts the optional parameters
    # @return [XapiStatementPipeSchema]
    def get_statement_pipe(statement_pipe_id, opts = {})
      data, _status_code, _headers = get_statement_pipe_with_http_info(statement_pipe_id, opts)
      data
    end

    # Get detailed information about an xAPI Statement Pipe 
    # Returns detailed information about the xAPI pipe.  This includes source and target urls, the last time a statement was successfully forwarded, and how many attempts have been made to send data to the target url. 
    # @param statement_pipe_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(XapiStatementPipeSchema, Fixnum, Hash)>] XapiStatementPipeSchema data, response status code and response headers
    def get_statement_pipe_with_http_info(statement_pipe_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: XapiApi.get_statement_pipe ...'
      end
      # verify the required parameter 'statement_pipe_id' is set
      if statement_pipe_id.nil?
        fail ArgumentError, "Missing the required parameter 'statement_pipe_id' when calling XapiApi.get_statement_pipe"
      end
      # resource path
      local_var_path = '/xapi/statementPipes/{statementPipeId}'.sub('{' + 'statementPipeId' + '}', statement_pipe_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'XapiStatementPipeSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: XapiApi#get_statement_pipe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of xAPI Statement Pipes 
    # Returns a list of all xAPI statement pipes. 
    # @param [Hash] opts the optional parameters
    # @return [XapiStatementPipeListSchema]
    def get_statement_pipes(opts = {})
      data, _status_code, _headers = get_statement_pipes_with_http_info(opts)
      data
    end

    # Get a list of xAPI Statement Pipes 
    # Returns a list of all xAPI statement pipes. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(XapiStatementPipeListSchema, Fixnum, Hash)>] XapiStatementPipeListSchema data, response status code and response headers
    def get_statement_pipes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: XapiApi.get_statement_pipes ...'
      end
      # resource path
      local_var_path = '/xapi/statementPipes'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'XapiStatementPipeListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: XapiApi#get_statement_pipes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get detailed information about the xAPI Credentials 
    # Returns detailed information about the xAPI credentials.  This includes the id (username), secret (password), permissions, and whether or not the credentials are enabled. 
    # @param xapi_credential_id 
    # @param [Hash] opts the optional parameters
    # @return [XapiCredentialSchema]
    def get_xapi_credential(xapi_credential_id, opts = {})
      data, _status_code, _headers = get_xapi_credential_with_http_info(xapi_credential_id, opts)
      data
    end

    # Get detailed information about the xAPI Credentials 
    # Returns detailed information about the xAPI credentials.  This includes the id (username), secret (password), permissions, and whether or not the credentials are enabled. 
    # @param xapi_credential_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(XapiCredentialSchema, Fixnum, Hash)>] XapiCredentialSchema data, response status code and response headers
    def get_xapi_credential_with_http_info(xapi_credential_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: XapiApi.get_xapi_credential ...'
      end
      # verify the required parameter 'xapi_credential_id' is set
      if xapi_credential_id.nil?
        fail ArgumentError, "Missing the required parameter 'xapi_credential_id' when calling XapiApi.get_xapi_credential"
      end
      # resource path
      local_var_path = '/xapi/credentials/{xapiCredentialId}'.sub('{' + 'xapiCredentialId' + '}', xapi_credential_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'XapiCredentialSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: XapiApi#get_xapi_credential\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of xAPI Credentials 
    # Returns a list of xAPI credentials.  Can be filtered using the request parameters to provide a subset of results.  >**Note:** >This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a `more` token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :datetime_filter Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (default to updated)
    # @option opts [String] :filter Optional string which filters results by a specified field (described by filterBy).
    # @option opts [String] :filter_by Optional enum parameter for specifying the field on which to run the filter.  (default to credential_id)
    # @option opts [String] :order_by Optional enum parameter for specifying the field and order by which to sort the results.  (default to updated_asc)
    # @option opts [String] :more Pagination token returned as &#x60;more&#x60; property of multi page list requests
    # @return [XapiCredentialsListSchema]
    def get_xapi_credentials(opts = {})
      data, _status_code, _headers = get_xapi_credentials_with_http_info(opts)
      data
    end

    # Get a list of xAPI Credentials 
    # Returns a list of xAPI credentials.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :datetime_filter Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against
    # @option opts [String] :filter Optional string which filters results by a specified field (described by filterBy).
    # @option opts [String] :filter_by Optional enum parameter for specifying the field on which to run the filter. 
    # @option opts [String] :order_by Optional enum parameter for specifying the field and order by which to sort the results. 
    # @option opts [String] :more Pagination token returned as &#x60;more&#x60; property of multi page list requests
    # @return [Array<(XapiCredentialsListSchema, Fixnum, Hash)>] XapiCredentialsListSchema data, response status code and response headers
    def get_xapi_credentials_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: XapiApi.get_xapi_credentials ...'
      end
      # resource path
      local_var_path = '/xapi/credentials'

      # query parameters
      query_params = {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'datetimeFilter'] = opts[:'datetime_filter'] if !opts[:'datetime_filter'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'filterBy'] = opts[:'filter_by'] if !opts[:'filter_by'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'XapiCredentialsListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: XapiApi#get_xapi_credentials\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update an xAPI Statement Pipe 
    # Creates or updates information about the xAPI statement pipe.  - If the xAPI statement pipe is instead being updated, the pipe will start over and forward any statements it finds, even if it had already forwarded those statements.  If the pipe being edited is currently being processed, then this request will fail with a status code of 409.  >**Note:** >This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the creation of the xAPI statement pipe takes place. 
    # @param statement_pipe_id 
    # @param xapi_statement_pipe 
    # @param [Hash] opts the optional parameters
    # @return [StringResultSchema]
    def set_statement_pipe(statement_pipe_id, xapi_statement_pipe, opts = {})
      data, _status_code, _headers = set_statement_pipe_with_http_info(statement_pipe_id, xapi_statement_pipe, opts)
      data
    end

    # Create or update an xAPI Statement Pipe 
    # Creates or updates information about the xAPI statement pipe.  - If the xAPI statement pipe is instead being updated, the pipe will start over and forward any statements it finds, even if it had already forwarded those statements.  If the pipe being edited is currently being processed, then this request will fail with a status code of 409.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the creation of the xAPI statement pipe takes place. 
    # @param statement_pipe_id 
    # @param xapi_statement_pipe 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringResultSchema, Fixnum, Hash)>] StringResultSchema data, response status code and response headers
    def set_statement_pipe_with_http_info(statement_pipe_id, xapi_statement_pipe, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: XapiApi.set_statement_pipe ...'
      end
      # verify the required parameter 'statement_pipe_id' is set
      if statement_pipe_id.nil?
        fail ArgumentError, "Missing the required parameter 'statement_pipe_id' when calling XapiApi.set_statement_pipe"
      end
      # verify the required parameter 'xapi_statement_pipe' is set
      if xapi_statement_pipe.nil?
        fail ArgumentError, "Missing the required parameter 'xapi_statement_pipe' when calling XapiApi.set_statement_pipe"
      end
      # resource path
      local_var_path = '/xapi/statementPipes/{statementPipeId}'.sub('{' + 'statementPipeId' + '}', statement_pipe_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(xapi_statement_pipe)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StringResultSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: XapiApi#set_statement_pipe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update xAPI Credentials 
    # Creates or updates information about the xAPI credentials. 
    # @param xapi_credential_id 
    # @param xapi_credential 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_xapi_credential(xapi_credential_id, xapi_credential, opts = {})
      set_xapi_credential_with_http_info(xapi_credential_id, xapi_credential, opts)
      nil
    end

    # Create or update xAPI Credentials 
    # Creates or updates information about the xAPI credentials. 
    # @param xapi_credential_id 
    # @param xapi_credential 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_xapi_credential_with_http_info(xapi_credential_id, xapi_credential, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: XapiApi.set_xapi_credential ...'
      end
      # verify the required parameter 'xapi_credential_id' is set
      if xapi_credential_id.nil?
        fail ArgumentError, "Missing the required parameter 'xapi_credential_id' when calling XapiApi.set_xapi_credential"
      end
      # verify the required parameter 'xapi_credential' is set
      if xapi_credential.nil?
        fail ArgumentError, "Missing the required parameter 'xapi_credential' when calling XapiApi.set_xapi_credential"
      end
      # resource path
      local_var_path = '/xapi/credentials/{xapiCredentialId}'.sub('{' + 'xapiCredentialId' + '}', xapi_credential_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(xapi_credential)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: XapiApi#set_xapi_credential\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
