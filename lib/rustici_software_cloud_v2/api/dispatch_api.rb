=begin
#SCORM Cloud Rest API

#REST API used for SCORM Cloud integrations.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'uri'

module RusticiSoftwareCloudV2
  class DispatchApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    extend Gem::Deprecate

    # Create a group of Destinations 
    # Creates a group of destinations.  A destination is a label used to identify an entity outside of SCORM Cloud, such as an LMS.  Used in conjunction with dispatches to provide access control mechanisms for the courses distributed to the destination. 
    # @param destinations_list 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_destinations(destinations_list, opts = {})
      create_destinations_with_http_info(destinations_list, opts)
      nil
    end

    # Create a group of Destinations 
    # Creates a group of destinations.  A destination is a label used to identify an entity outside of SCORM Cloud, such as an LMS.  Used in conjunction with dispatches to provide access control mechanisms for the courses distributed to the destination. 
    # @param destinations_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_destinations_with_http_info(destinations_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.create_destinations ...'
      end
      # verify the required parameter 'destinations_list' is set
      if destinations_list.nil?
        fail ArgumentError, "Missing the required parameter 'destinations_list' when calling DispatchApi.create_destinations"
      end
      # resource path
      local_var_path = '/dispatch/destinations'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(destinations_list)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#create_destinations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a group of Dispatches 
    # Creates a group of dispatches.  Dispatches are the connection between a course and a destination.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud.  As an extension, dispatches allow for limiting access control even after the zip file has been given to the destination.  >**Caution:** >Only one dispatch can exist for a given course-destination combination.  If calling this method with the same course and destination supplied, the old one will be loaded for modification.  An exception to this is if a dispatchId is passed in the body, the request will fail with a 400 response warning that the dispatch already exists.  This is to prevent confusion over which dispatchId is to be used in future requests. 
    # @param dispatch_list 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_dispatches(dispatch_list, opts = {})
      create_dispatches_with_http_info(dispatch_list, opts)
      nil
    end

    # Create a group of Dispatches 
    # Creates a group of dispatches.  Dispatches are the connection between a course and a destination.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud.  As an extension, dispatches allow for limiting access control even after the zip file has been given to the destination.  &gt;**Caution:** &gt;Only one dispatch can exist for a given course-destination combination.  If calling this method with the same course and destination supplied, the old one will be loaded for modification.  An exception to this is if a dispatchId is passed in the body, the request will fail with a 400 response warning that the dispatch already exists.  This is to prevent confusion over which dispatchId is to be used in future requests. 
    # @param dispatch_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_dispatches_with_http_info(dispatch_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.create_dispatches ...'
      end
      # verify the required parameter 'dispatch_list' is set
      if dispatch_list.nil?
        fail ArgumentError, "Missing the required parameter 'dispatch_list' when calling DispatchApi.create_dispatches"
      end
      # resource path
      local_var_path = '/dispatch/dispatches'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dispatch_list)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#create_dispatches\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Destination 
    # Deletes the specified destination.  >**Caution:** >This will also delete all dispatches belonging to the destination. 
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_destination(destination_id, opts = {})
      delete_destination_with_http_info(destination_id, opts)
      nil
    end

    # Delete a Destination 
    # Deletes the specified destination.  &gt;**Caution:** &gt;This will also delete all dispatches belonging to the destination. 
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_destination_with_http_info(destination_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.delete_destination ...'
      end
      # verify the required parameter 'destination_id' is set
      if destination_id.nil?
        fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.delete_destination"
      end
      # resource path
      local_var_path = '/dispatch/destinations/{destinationId}'.sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#delete_destination\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Destination's Dispatches 
    # Deletes all the dispatches from the destination.  >**Caution:** >This will invalidate any existing dispatch packages, rendering them unlaunchable. 
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_destination_dispatches(destination_id, opts = {})
      delete_destination_dispatches_with_http_info(destination_id, opts)
      nil
    end

    # Delete a Destination&#39;s Dispatches 
    # Deletes all the dispatches from the destination.  &gt;**Caution:** &gt;This will invalidate any existing dispatch packages, rendering them unlaunchable. 
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_destination_dispatches_with_http_info(destination_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.delete_destination_dispatches ...'
      end
      # verify the required parameter 'destination_id' is set
      if destination_id.nil?
        fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.delete_destination_dispatches"
      end
      # resource path
      local_var_path = '/dispatch/destinations/{destinationId}/dispatches'.sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#delete_destination_dispatches\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete tags from a Destination 
    # Deletes the specified tags from the destination.  Deleting tags that do not exist will still result in a success. 
    # @param destination_id Identifier for the destination
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_destination_tags(destination_id, tags, opts = {})
      delete_destination_tags_with_http_info(destination_id, tags, opts)
      nil
    end

    # Delete tags from a Destination 
    # Deletes the specified tags from the destination.  Deleting tags that do not exist will still result in a success. 
    # @param destination_id Identifier for the destination
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_destination_tags_with_http_info(destination_id, tags, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.delete_destination_tags ...'
      end
      # verify the required parameter 'destination_id' is set
      if destination_id.nil?
        fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.delete_destination_tags"
      end
      # verify the required parameter 'tags' is set
      if tags.nil?
        fail ArgumentError, "Missing the required parameter 'tags' when calling DispatchApi.delete_destination_tags"
      end
      # resource path
      local_var_path = '/dispatch/destinations/{destinationId}/tags'.sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tags)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#delete_destination_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Dispatch 
    # Deletes the specified dispatch.  >**Caution:** >This will invalidate any existing dispatch packages, rendering them unlaunchable. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_dispatch(dispatch_id, opts = {})
      delete_dispatch_with_http_info(dispatch_id, opts)
      nil
    end

    # Delete a Dispatch 
    # Deletes the specified dispatch.  &gt;**Caution:** &gt;This will invalidate any existing dispatch packages, rendering them unlaunchable. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dispatch_with_http_info(dispatch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.delete_dispatch ...'
      end
      # verify the required parameter 'dispatch_id' is set
      if dispatch_id.nil?
        fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.delete_dispatch"
      end
      # resource path
      local_var_path = '/dispatch/dispatches/{dispatchId}'.sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#delete_dispatch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete postback information from a Dispatch 
    # Clears the postback settings from the dispatch.  This causes the postback settings to inherit a value from a higher level (e.g. application).  If there is no setting at the application level, this will disable postbacks for the dispatch. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_dispatch_postback_info(dispatch_id, opts = {})
      delete_dispatch_postback_info_with_http_info(dispatch_id, opts)
      nil
    end

    # Delete postback information from a Dispatch 
    # Clears the postback settings from the dispatch.  This causes the postback settings to inherit a value from a higher level (e.g. application).  If there is no setting at the application level, this will disable postbacks for the dispatch. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dispatch_postback_info_with_http_info(dispatch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.delete_dispatch_postback_info ...'
      end
      # verify the required parameter 'dispatch_id' is set
      if dispatch_id.nil?
        fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.delete_dispatch_postback_info"
      end
      # resource path
      local_var_path = '/dispatch/dispatches/{dispatchId}/postback'.sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#delete_dispatch_postback_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete tags from a Dispatch 
    # Deletes the specified tags from the dispatch.  Deleting tags that do not exist will still result in a success. 
    # @param dispatch_id Identifier for the dispatch
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_dispatch_tags(dispatch_id, tags, opts = {})
      delete_dispatch_tags_with_http_info(dispatch_id, tags, opts)
      nil
    end

    # Delete tags from a Dispatch 
    # Deletes the specified tags from the dispatch.  Deleting tags that do not exist will still result in a success. 
    # @param dispatch_id Identifier for the dispatch
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dispatch_tags_with_http_info(dispatch_id, tags, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.delete_dispatch_tags ...'
      end
      # verify the required parameter 'dispatch_id' is set
      if dispatch_id.nil?
        fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.delete_dispatch_tags"
      end
      # verify the required parameter 'tags' is set
      if tags.nil?
        fail ArgumentError, "Missing the required parameter 'tags' when calling DispatchApi.delete_dispatch_tags"
      end
      # resource path
      local_var_path = '/dispatch/dispatches/{dispatchId}/tags'.sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tags)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#delete_dispatch_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a group of Dispatches 
    # Deletes the specified group of dispatches.  Can be filtered using the request parameters to provide a subset of results.  >**Caution:** >This will invalidate any existing dispatch packages, rendering them unlaunchable.  >**Note:** >One of the filter parameters (i.e. `courseId`, `since`/`until`, `tags`, or `filter`) needs to be provided.  This is to prevent accidental deletion of all dispatches.  If you do wish to update all dispatches, try setting the since parameter to a value prior to the creation of any dispatches.  >**Info:** >If using one of our client libraries, refer to its README for additional information on how to work with the `X-Total-Count` header. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only retrieve resources having &#x60;courseId&#x60;
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :datetime_filter Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (default to updated)
    # @option opts [Array<String>] :tags Filter items matching any tag provided (not all)
    # @option opts [String] :filter Optional string which filters results by a specified field (described by filterBy).
    # @option opts [String] :filter_by Optional enum parameter for specifying the field on which to run the filter.  (default to dispatch_id)
    # @return [nil]
    def delete_dispatches(opts = {})
      delete_dispatches_with_http_info(opts)
      nil
    end

    # Delete a group of Dispatches 
    # Deletes the specified group of dispatches.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Caution:** &gt;This will invalidate any existing dispatch packages, rendering them unlaunchable.  &gt;**Note:** &gt;One of the filter parameters (i.e. &#x60;courseId&#x60;, &#x60;since&#x60;/&#x60;until&#x60;, &#x60;tags&#x60;, or &#x60;filter&#x60;) needs to be provided.  This is to prevent accidental deletion of all dispatches.  If you do wish to update all dispatches, try setting the since parameter to a value prior to the creation of any dispatches.  &gt;**Info:** &gt;If using one of our client libraries, refer to its README for additional information on how to work with the &#x60;X-Total-Count&#x60; header. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only retrieve resources having &#x60;courseId&#x60;
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :datetime_filter Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against
    # @option opts [Array<String>] :tags Filter items matching any tag provided (not all)
    # @option opts [String] :filter Optional string which filters results by a specified field (described by filterBy).
    # @option opts [String] :filter_by Optional enum parameter for specifying the field on which to run the filter. 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dispatches_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.delete_dispatches ...'
      end
      # resource path
      local_var_path = '/dispatch/dispatches'

      # query parameters
      query_params = {}
      query_params[:'courseId'] = opts[:'course_id'] if !opts[:'course_id'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'datetimeFilter'] = opts[:'datetime_filter'] if !opts[:'datetime_filter'].nil?
      query_params[:'tags'] = @api_client.build_collection_param(opts[:'tags'], :csv) if !opts[:'tags'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'filterBy'] = opts[:'filter_by'] if !opts[:'filter_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#delete_dispatches\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update registration instancing status for a Destination's Dispatches 
    # Updates the restration instancing status for all dispatches distributed to the destination.  Registration instancing is the default for dispatches, in order to support versioning of dispatches.  A small portion of users may experience duplicate registrations with content dispatched to some LMS platforms.  If you happen to be dispatching content to an LMS with this issue, disabling registration instancing here will resolve the problems. However, dispatch versioning will also be disabled. 
    # @param destination_id Identifier for the destination
    # @param enabled 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enable_registration_instancing(destination_id, enabled, opts = {})
      enable_registration_instancing_with_http_info(destination_id, enabled, opts)
      nil
    end

    # Update registration instancing status for a Destination&#39;s Dispatches 
    # Updates the restration instancing status for all dispatches distributed to the destination.  Registration instancing is the default for dispatches, in order to support versioning of dispatches.  A small portion of users may experience duplicate registrations with content dispatched to some LMS platforms.  If you happen to be dispatching content to an LMS with this issue, disabling registration instancing here will resolve the problems. However, dispatch versioning will also be disabled. 
    # @param destination_id Identifier for the destination
    # @param enabled 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def enable_registration_instancing_with_http_info(destination_id, enabled, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.enable_registration_instancing ...'
      end
      # verify the required parameter 'destination_id' is set
      if destination_id.nil?
        fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.enable_registration_instancing"
      end
      # verify the required parameter 'enabled' is set
      if enabled.nil?
        fail ArgumentError, "Missing the required parameter 'enabled' when calling DispatchApi.enable_registration_instancing"
      end
      # resource path
      local_var_path = '/dispatch/destinations/{destinationId}/dispatches/registrationInstancing'.sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(enabled)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#enable_registration_instancing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get detailed information about a Destination 
    # Returns detailed information about the destination.  This includes name, tags, and launchAuth information. 
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_dispatch_count Include a count of dispatches for the destination. (default to false)
    # @return [DestinationInfoSchema]
    def get_destination(destination_id, opts = {})
      data, _status_code, _headers = get_destination_with_http_info(destination_id, opts)
      data
    end

    # Get detailed information about a Destination 
    # Returns detailed information about the destination.  This includes name, tags, and launchAuth information. 
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_dispatch_count Include a count of dispatches for the destination.
    # @return [Array<(DestinationInfoSchema, Fixnum, Hash)>] DestinationInfoSchema data, response status code and response headers
    def get_destination_with_http_info(destination_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.get_destination ...'
      end
      # verify the required parameter 'destination_id' is set
      if destination_id.nil?
        fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.get_destination"
      end
      # resource path
      local_var_path = '/dispatch/destinations/{destinationId}'.sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeDispatchCount'] = opts[:'include_dispatch_count'] if !opts[:'include_dispatch_count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DestinationInfoSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_destination\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get registration count for a Destination's Dispatches 
    # Returns the registration count for all dispatches distributed to the destination.  >**Note:** >The count here is a convenience counter.  Since it has the capability of being reset, it may not match the actual billed registration count for a dispatch. 
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [IntegerResultSchema]
    def get_destination_dispatch_registration_count(destination_id, opts = {})
      data, _status_code, _headers = get_destination_dispatch_registration_count_with_http_info(destination_id, opts)
      data
    end

    # Get registration count for a Destination&#39;s Dispatches 
    # Returns the registration count for all dispatches distributed to the destination.  &gt;**Note:** &gt;The count here is a convenience counter.  Since it has the capability of being reset, it may not match the actual billed registration count for a dispatch. 
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [Array<(IntegerResultSchema, Fixnum, Hash)>] IntegerResultSchema data, response status code and response headers
    def get_destination_dispatch_registration_count_with_http_info(destination_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.get_destination_dispatch_registration_count ...'
      end
      # verify the required parameter 'destination_id' is set
      if destination_id.nil?
        fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.get_destination_dispatch_registration_count"
      end
      # resource path
      local_var_path = '/dispatch/destinations/{destinationId}/dispatches/registrationCount'.sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IntegerResultSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_destination_dispatch_registration_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download a zip file for a Destination's Dispatches 
    # Downloads a zip file containing all of the dispatch packages for the destination.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud. 
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The type of dispatch package to export (SCORM_12 only supported in SCORM Cloud today) (default to SCORM_12)
    # @option opts [String] :css_url 
    # @option opts [Array<String>] :tags Filter items matching any tag provided (not all)
    # @return [File]
    def get_destination_dispatch_zip(destination_id, opts = {})
      data, _status_code, _headers = get_destination_dispatch_zip_with_http_info(destination_id, opts)
      data
    end

    # Download a zip file for a Destination&#39;s Dispatches 
    # Downloads a zip file containing all of the dispatch packages for the destination.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud. 
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The type of dispatch package to export (SCORM_12 only supported in SCORM Cloud today)
    # @option opts [String] :css_url 
    # @option opts [Array<String>] :tags Filter items matching any tag provided (not all)
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def get_destination_dispatch_zip_with_http_info(destination_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.get_destination_dispatch_zip ...'
      end
      # verify the required parameter 'destination_id' is set
      if destination_id.nil?
        fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.get_destination_dispatch_zip"
      end
      # resource path
      local_var_path = '/dispatch/destinations/{destinationId}/dispatches/zip'.sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'cssUrl'] = opts[:'css_url'] if !opts[:'css_url'].nil?
      query_params[:'tags'] = @api_client.build_collection_param(opts[:'tags'], :csv) if !opts[:'tags'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/zip'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_destination_dispatch_zip\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of a Destination's Dispatches 
    # Returns a list of dispatches belonging to the destination.  Can be filtered using the request parameters to provide a subset of results.  Using the `courseId` filter should only ever yield 0 or 1 results, as a dispatch is the intersection of a course and a destination.  This can be useful for identifying if a certain course is dispatched to the destination.  >**Note:** >This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a `more` token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only retrieve resources having &#x60;courseId&#x60;
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :datetime_filter Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (default to updated)
    # @option opts [Array<String>] :tags Filter items matching any tag provided (not all)
    # @option opts [String] :filter Optional string which filters results by a specified field (described by filterBy).
    # @option opts [String] :filter_by Optional enum parameter for specifying the field on which to run the filter.  (default to dispatch_id)
    # @option opts [String] :order_by Optional enum parameter for specifying the field and order by which to sort the results.  (default to updated_asc)
    # @option opts [String] :more Pagination token returned as &#x60;more&#x60; property of multi page list requests
    # @option opts [BOOLEAN] :include_total_count Include the total count of results matching the provided filters as a header on the initial request.  The header will not be present on subsequent requests resulting from passing the &#x60;more&#x60; token.  (default to false)
    # @return [DispatchListSchema]
    def get_destination_dispatches(destination_id, opts = {})
      data, _status_code, _headers = get_destination_dispatches_with_http_info(destination_id, opts)
      data
    end

    # Get a list of a Destination&#39;s Dispatches 
    # Returns a list of dispatches belonging to the destination.  Can be filtered using the request parameters to provide a subset of results.  Using the &#x60;courseId&#x60; filter should only ever yield 0 or 1 results, as a dispatch is the intersection of a course and a destination.  This can be useful for identifying if a certain course is dispatched to the destination.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only retrieve resources having &#x60;courseId&#x60;
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :datetime_filter Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against
    # @option opts [Array<String>] :tags Filter items matching any tag provided (not all)
    # @option opts [String] :filter Optional string which filters results by a specified field (described by filterBy).
    # @option opts [String] :filter_by Optional enum parameter for specifying the field on which to run the filter. 
    # @option opts [String] :order_by Optional enum parameter for specifying the field and order by which to sort the results. 
    # @option opts [String] :more Pagination token returned as &#x60;more&#x60; property of multi page list requests
    # @option opts [BOOLEAN] :include_total_count Include the total count of results matching the provided filters as a header on the initial request.  The header will not be present on subsequent requests resulting from passing the &#x60;more&#x60; token. 
    # @return [Array<(DispatchListSchema, Fixnum, Hash)>] DispatchListSchema data, response status code and response headers
    def get_destination_dispatches_with_http_info(destination_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.get_destination_dispatches ...'
      end
      # verify the required parameter 'destination_id' is set
      if destination_id.nil?
        fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.get_destination_dispatches"
      end
      # resource path
      local_var_path = '/dispatch/destinations/{destinationId}/dispatches'.sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'courseId'] = opts[:'course_id'] if !opts[:'course_id'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'datetimeFilter'] = opts[:'datetime_filter'] if !opts[:'datetime_filter'].nil?
      query_params[:'tags'] = @api_client.build_collection_param(opts[:'tags'], :csv) if !opts[:'tags'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'filterBy'] = opts[:'filter_by'] if !opts[:'filter_by'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?
      query_params[:'includeTotalCount'] = opts[:'include_total_count'] if !opts[:'include_total_count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DispatchListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_destination_dispatches\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get user PII hashing status for a Destination 
    # Returns whether or not user PII hashing is enabled for the destination.  Enabling it will cause all user PII to be hashed.  Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [EnabledSchema]
    def get_destination_hash_user_info(destination_id, opts = {})
      data, _status_code, _headers = get_destination_hash_user_info_with_http_info(destination_id, opts)
      data
    end

    # Get user PII hashing status for a Destination 
    # Returns whether or not user PII hashing is enabled for the destination.  Enabling it will cause all user PII to be hashed.  Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnabledSchema, Fixnum, Hash)>] EnabledSchema data, response status code and response headers
    def get_destination_hash_user_info_with_http_info(destination_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.get_destination_hash_user_info ...'
      end
      # verify the required parameter 'destination_id' is set
      if destination_id.nil?
        fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.get_destination_hash_user_info"
      end
      # resource path
      local_var_path = '/dispatch/destinations/{destinationId}/dispatches/hashUserInfo'.sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnabledSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_destination_hash_user_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get tags for a Destination 
    # Returns the tags for the destination. 
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [TagListSchema]
    def get_destination_tags(destination_id, opts = {})
      data, _status_code, _headers = get_destination_tags_with_http_info(destination_id, opts)
      data
    end

    # Get tags for a Destination 
    # Returns the tags for the destination. 
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [Array<(TagListSchema, Fixnum, Hash)>] TagListSchema data, response status code and response headers
    def get_destination_tags_with_http_info(destination_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.get_destination_tags ...'
      end
      # verify the required parameter 'destination_id' is set
      if destination_id.nil?
        fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.get_destination_tags"
      end
      # resource path
      local_var_path = '/dispatch/destinations/{destinationId}/tags'.sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TagListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_destination_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of Destinations 
    # Returns a list of destinations.  Can be filtered using the request parameters to provide a subset of results.  >**Note:** >This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a `more` token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request.  >**Info:** >This endpoint caches the dispatch count of a destination for 24 hours if the `includeDispatchCount` parameter is set to `true`.  Since this value is cached for an extended period, any changes made to the number of dispatches for a destination will not be reflected in the results of this endpoint until the caching period has passed.  >If you want to get an up-to-date value of the dispatch count for a single destination within the caching period, use the GetDestination endpoint with `includeDispatchCount` set to `true`.  GetDestination *always* gathers the most up-to-date values and overwrites them in the cache, resetting the caching period for that destination. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only retrieve resources having &#x60;courseId&#x60;
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :datetime_filter Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (default to updated)
    # @option opts [Array<String>] :tags Filter items matching any tag provided (not all)
    # @option opts [String] :filter Optional string which filters results by a specified field (described by filterBy).
    # @option opts [String] :filter_by Optional enum parameter for specifying the field on which to run the filter.  (default to destination_id)
    # @option opts [String] :order_by Optional enum parameter for specifying the field and order by which to sort the results.  (default to updated_asc)
    # @option opts [String] :more Pagination token returned as &#x60;more&#x60; property of multi page list requests
    # @option opts [BOOLEAN] :include_dispatch_count Include a count of dispatches for each destination. (default to false)
    # @option opts [BOOLEAN] :include_total_count Include the total count of results matching the provided filters as a header on the initial request.  The header will not be present on subsequent requests resulting from passing the &#x60;more&#x60; token.  (default to false)
    # @return [DestinationInfoListSchema]
    def get_destinations(opts = {})
      data, _status_code, _headers = get_destinations_with_http_info(opts)
      data
    end

    # Get a list of Destinations 
    # Returns a list of destinations.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request.  &gt;**Info:** &gt;This endpoint caches the dispatch count of a destination for 24 hours if the &#x60;includeDispatchCount&#x60; parameter is set to &#x60;true&#x60;.  Since this value is cached for an extended period, any changes made to the number of dispatches for a destination will not be reflected in the results of this endpoint until the caching period has passed.  &gt;If you want to get an up-to-date value of the dispatch count for a single destination within the caching period, use the GetDestination endpoint with &#x60;includeDispatchCount&#x60; set to &#x60;true&#x60;.  GetDestination *always* gathers the most up-to-date values and overwrites them in the cache, resetting the caching period for that destination. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only retrieve resources having &#x60;courseId&#x60;
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :datetime_filter Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against
    # @option opts [Array<String>] :tags Filter items matching any tag provided (not all)
    # @option opts [String] :filter Optional string which filters results by a specified field (described by filterBy).
    # @option opts [String] :filter_by Optional enum parameter for specifying the field on which to run the filter. 
    # @option opts [String] :order_by Optional enum parameter for specifying the field and order by which to sort the results. 
    # @option opts [String] :more Pagination token returned as &#x60;more&#x60; property of multi page list requests
    # @option opts [BOOLEAN] :include_dispatch_count Include a count of dispatches for each destination.
    # @option opts [BOOLEAN] :include_total_count Include the total count of results matching the provided filters as a header on the initial request.  The header will not be present on subsequent requests resulting from passing the &#x60;more&#x60; token. 
    # @return [Array<(DestinationInfoListSchema, Fixnum, Hash)>] DestinationInfoListSchema data, response status code and response headers
    def get_destinations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.get_destinations ...'
      end
      # resource path
      local_var_path = '/dispatch/destinations'

      # query parameters
      query_params = {}
      query_params[:'courseId'] = opts[:'course_id'] if !opts[:'course_id'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'datetimeFilter'] = opts[:'datetime_filter'] if !opts[:'datetime_filter'].nil?
      query_params[:'tags'] = @api_client.build_collection_param(opts[:'tags'], :csv) if !opts[:'tags'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'filterBy'] = opts[:'filter_by'] if !opts[:'filter_by'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?
      query_params[:'includeDispatchCount'] = opts[:'include_dispatch_count'] if !opts[:'include_dispatch_count'].nil?
      query_params[:'includeTotalCount'] = opts[:'include_total_count'] if !opts[:'include_total_count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DestinationInfoListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_destinations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get detailed information about a Dispatch 
    # Returns detailed information about the dispatch.  This includes destination and course IDs, as well as registration count. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [DispatchSchema]
    def get_dispatch(dispatch_id, opts = {})
      data, _status_code, _headers = get_dispatch_with_http_info(dispatch_id, opts)
      data
    end

    # Get detailed information about a Dispatch 
    # Returns detailed information about the dispatch.  This includes destination and course IDs, as well as registration count. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [Array<(DispatchSchema, Fixnum, Hash)>] DispatchSchema data, response status code and response headers
    def get_dispatch_with_http_info(dispatch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.get_dispatch ...'
      end
      # verify the required parameter 'dispatch_id' is set
      if dispatch_id.nil?
        fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.get_dispatch"
      end
      # resource path
      local_var_path = '/dispatch/dispatches/{dispatchId}'.sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DispatchSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_dispatch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get enabled status of a Dispatch 
    # Returns the enabled status for the dispatch.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [EnabledSchema]
    def get_dispatch_enabled(dispatch_id, opts = {})
      data, _status_code, _headers = get_dispatch_enabled_with_http_info(dispatch_id, opts)
      data
    end

    # Get enabled status of a Dispatch 
    # Returns the enabled status for the dispatch.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnabledSchema, Fixnum, Hash)>] EnabledSchema data, response status code and response headers
    def get_dispatch_enabled_with_http_info(dispatch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.get_dispatch_enabled ...'
      end
      # verify the required parameter 'dispatch_id' is set
      if dispatch_id.nil?
        fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.get_dispatch_enabled"
      end
      # resource path
      local_var_path = '/dispatch/dispatches/{dispatchId}/enabled'.sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnabledSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_dispatch_enabled\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get user PII hashing status for a Dispatch 
    # Returns whether or not user PII hashing is enabled for the dispatch.  Enabling it will cause all user PII to be hashed.  Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [EnabledSchema]
    def get_dispatch_hash_user_info(dispatch_id, opts = {})
      data, _status_code, _headers = get_dispatch_hash_user_info_with_http_info(dispatch_id, opts)
      data
    end

    # Get user PII hashing status for a Dispatch 
    # Returns whether or not user PII hashing is enabled for the dispatch.  Enabling it will cause all user PII to be hashed.  Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnabledSchema, Fixnum, Hash)>] EnabledSchema data, response status code and response headers
    def get_dispatch_hash_user_info_with_http_info(dispatch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.get_dispatch_hash_user_info ...'
      end
      # verify the required parameter 'dispatch_id' is set
      if dispatch_id.nil?
        fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.get_dispatch_hash_user_info"
      end
      # resource path
      local_var_path = '/dispatch/dispatches/{dispatchId}/hashUserInfo'.sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnabledSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_dispatch_hash_user_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get registration count for a Dispatch 
    # Returns the registration count for the dispatch, as well as the date and time of the last count reset, if any.  >**Note:** >The count here is a convenience counter.  Since it has the capability of being reset, it may not match the actual billed registration count for a dispatch. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [DispatchRegistrationCountSchema]
    def get_dispatch_registration_count(dispatch_id, opts = {})
      data, _status_code, _headers = get_dispatch_registration_count_with_http_info(dispatch_id, opts)
      data
    end

    # Get registration count for a Dispatch 
    # Returns the registration count for the dispatch, as well as the date and time of the last count reset, if any.  &gt;**Note:** &gt;The count here is a convenience counter.  Since it has the capability of being reset, it may not match the actual billed registration count for a dispatch. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [Array<(DispatchRegistrationCountSchema, Fixnum, Hash)>] DispatchRegistrationCountSchema data, response status code and response headers
    def get_dispatch_registration_count_with_http_info(dispatch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.get_dispatch_registration_count ...'
      end
      # verify the required parameter 'dispatch_id' is set
      if dispatch_id.nil?
        fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.get_dispatch_registration_count"
      end
      # resource path
      local_var_path = '/dispatch/dispatches/{dispatchId}/registrationCount'.sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DispatchRegistrationCountSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_dispatch_registration_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get tags for a Dispatch 
    # Returns the tags for the dispatch. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [TagListSchema]
    def get_dispatch_tags(dispatch_id, opts = {})
      data, _status_code, _headers = get_dispatch_tags_with_http_info(dispatch_id, opts)
      data
    end

    # Get tags for a Dispatch 
    # Returns the tags for the dispatch. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [Array<(TagListSchema, Fixnum, Hash)>] TagListSchema data, response status code and response headers
    def get_dispatch_tags_with_http_info(dispatch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.get_dispatch_tags ...'
      end
      # verify the required parameter 'dispatch_id' is set
      if dispatch_id.nil?
        fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.get_dispatch_tags"
      end
      # resource path
      local_var_path = '/dispatch/dispatches/{dispatchId}/tags'.sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TagListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_dispatch_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download a zip package for a Dispatch 
    # Downloads a zip package for the dispatch.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud. As an extension, dispatches allow for limiting access control even after the zip file has been given to the destination. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The type of dispatch package to export (currently only SCORM_12 available) (default to SCORM_12)
    # @option opts [String] :css_url Custom CSS to apply to the dispatch package
    # @return [File]
    def get_dispatch_zip(dispatch_id, opts = {})
      data, _status_code, _headers = get_dispatch_zip_with_http_info(dispatch_id, opts)
      data
    end

    # Download a zip package for a Dispatch 
    # Downloads a zip package for the dispatch.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud. As an extension, dispatches allow for limiting access control even after the zip file has been given to the destination. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The type of dispatch package to export (currently only SCORM_12 available)
    # @option opts [String] :css_url Custom CSS to apply to the dispatch package
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def get_dispatch_zip_with_http_info(dispatch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.get_dispatch_zip ...'
      end
      # verify the required parameter 'dispatch_id' is set
      if dispatch_id.nil?
        fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.get_dispatch_zip"
      end
      # resource path
      local_var_path = '/dispatch/dispatches/{dispatchId}/zip'.sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'cssUrl'] = opts[:'css_url'] if !opts[:'css_url'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/zip'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_dispatch_zip\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of Dispatches 
    # Returns a list of dispatches.  Can be filtered using the request parameters to provide a subset of results.  Using the `courseId` filter will allow for viewing which destinations the course has been dispatched to.  >**Note:** >This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a `more` token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only retrieve resources having &#x60;courseId&#x60;
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :datetime_filter Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (default to updated)
    # @option opts [Array<String>] :tags Filter items matching any tag provided (not all)
    # @option opts [String] :filter Optional string which filters results by a specified field (described by filterBy).
    # @option opts [String] :filter_by Optional enum parameter for specifying the field on which to run the filter.  (default to dispatch_id)
    # @option opts [String] :order_by Optional enum parameter for specifying the field and order by which to sort the results.  (default to updated_asc)
    # @option opts [String] :more Pagination token returned as &#x60;more&#x60; property of multi page list requests
    # @option opts [BOOLEAN] :include_total_count Include the total count of results matching the provided filters as a header on the initial request.  The header will not be present on subsequent requests resulting from passing the &#x60;more&#x60; token.  (default to false)
    # @return [DispatchListSchema]
    def get_dispatches(opts = {})
      data, _status_code, _headers = get_dispatches_with_http_info(opts)
      data
    end

    # Get a list of Dispatches 
    # Returns a list of dispatches.  Can be filtered using the request parameters to provide a subset of results.  Using the &#x60;courseId&#x60; filter will allow for viewing which destinations the course has been dispatched to.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only retrieve resources having &#x60;courseId&#x60;
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :datetime_filter Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against
    # @option opts [Array<String>] :tags Filter items matching any tag provided (not all)
    # @option opts [String] :filter Optional string which filters results by a specified field (described by filterBy).
    # @option opts [String] :filter_by Optional enum parameter for specifying the field on which to run the filter. 
    # @option opts [String] :order_by Optional enum parameter for specifying the field and order by which to sort the results. 
    # @option opts [String] :more Pagination token returned as &#x60;more&#x60; property of multi page list requests
    # @option opts [BOOLEAN] :include_total_count Include the total count of results matching the provided filters as a header on the initial request.  The header will not be present on subsequent requests resulting from passing the &#x60;more&#x60; token. 
    # @return [Array<(DispatchListSchema, Fixnum, Hash)>] DispatchListSchema data, response status code and response headers
    def get_dispatches_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.get_dispatches ...'
      end
      # resource path
      local_var_path = '/dispatch/dispatches'

      # query parameters
      query_params = {}
      query_params[:'courseId'] = opts[:'course_id'] if !opts[:'course_id'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'datetimeFilter'] = opts[:'datetime_filter'] if !opts[:'datetime_filter'].nil?
      query_params[:'tags'] = @api_client.build_collection_param(opts[:'tags'], :csv) if !opts[:'tags'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'filterBy'] = opts[:'filter_by'] if !opts[:'filter_by'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?
      query_params[:'includeTotalCount'] = opts[:'include_total_count'] if !opts[:'include_total_count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DispatchListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_dispatches\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the information necessary to import this dispatch as a resource link according to the IMS LTI 1.3 specification. 
    # Get the information necessary to import this dispatch as a resource link according to the IMS LTI 1.3 specification. The information from this call will be provided to the platform during the configuration step. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [DispatchLti13InfoSchema]
    def get_lti13_dispatch(dispatch_id, opts = {})
      data, _status_code, _headers = get_lti13_dispatch_with_http_info(dispatch_id, opts)
      data
    end

    # Get the information necessary to import this dispatch as a resource link according to the IMS LTI 1.3 specification. 
    # Get the information necessary to import this dispatch as a resource link according to the IMS LTI 1.3 specification. The information from this call will be provided to the platform during the configuration step. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [Array<(DispatchLti13InfoSchema, Fixnum, Hash)>] DispatchLti13InfoSchema data, response status code and response headers
    def get_lti13_dispatch_with_http_info(dispatch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.get_lti13_dispatch ...'
      end
      # verify the required parameter 'dispatch_id' is set
      if dispatch_id.nil?
        fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.get_lti13_dispatch"
      end
      # resource path
      local_var_path = '/dispatch/dispatches/{dispatchId}/lti13'.sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DispatchLti13InfoSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_lti13_dispatch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Launch this dispatch using the IMS LTI 1.3 specification. 
    # Launch this dispatch using the IMS LTI 1.3 specification. This is the final step in the LTI 1.3 launch process, and is the request that redirects to the resource link (i.e. course). 
    # @param dispatch_id Identifier for the dispatch
    # @param external_config External configuration object
    # @param jwt 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_lti13_dispatch_launch(dispatch_id, external_config, jwt, opts = {})
      get_lti13_dispatch_launch_with_http_info(dispatch_id, external_config, jwt, opts)
      nil
    end

    # Launch this dispatch using the IMS LTI 1.3 specification. 
    # Launch this dispatch using the IMS LTI 1.3 specification. This is the final step in the LTI 1.3 launch process, and is the request that redirects to the resource link (i.e. course). 
    # @param dispatch_id Identifier for the dispatch
    # @param external_config External configuration object
    # @param jwt 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_lti13_dispatch_launch_with_http_info(dispatch_id, external_config, jwt, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.get_lti13_dispatch_launch ...'
      end
      # verify the required parameter 'dispatch_id' is set
      if dispatch_id.nil?
        fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.get_lti13_dispatch_launch"
      end
      # verify the required parameter 'external_config' is set
      if external_config.nil?
        fail ArgumentError, "Missing the required parameter 'external_config' when calling DispatchApi.get_lti13_dispatch_launch"
      end
      # verify the required parameter 'jwt' is set
      if jwt.nil?
        fail ArgumentError, "Missing the required parameter 'jwt' when calling DispatchApi.get_lti13_dispatch_launch"
      end
      # resource path
      local_var_path = '/dispatch/dispatches/{dispatchId}/launches'.sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'externalConfig'] = external_config
      query_params[:'jwt'] = jwt

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_lti13_dispatch_launch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the information needed to configure a LTI 1.3 platform with the destination id `destinationId` 
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [Lti13ToolConfigurationSchema]
    def get_lti13_tool_configuration_schema(destination_id, opts = {})
      data, _status_code, _headers = get_lti13_tool_configuration_schema_with_http_info(destination_id, opts)
      data
    end

    # Get the information needed to configure a LTI 1.3 platform with the destination id &#x60;destinationId&#x60; 
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [Array<(Lti13ToolConfigurationSchema, Fixnum, Hash)>] Lti13ToolConfigurationSchema data, response status code and response headers
    def get_lti13_tool_configuration_schema_with_http_info(destination_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.get_lti13_tool_configuration_schema ...'
      end
      # verify the required parameter 'destination_id' is set
      if destination_id.nil?
        fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.get_lti13_tool_configuration_schema"
      end
      # resource path
      local_var_path = '/dispatch/destinations/{destinationId}/lti13'.sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Lti13ToolConfigurationSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_lti13_tool_configuration_schema\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the information necessary to launch this dispatch using the IMS LTI 1.1 specification. 
    # Retrieve the information needed to launch this dispatch using the IMS LTI 1.1 specification. This information is then provided to the platform so it can launch this dispatch. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [DispatchLtiInfoSchema]
    def get_lti_dispatch(dispatch_id, opts = {})
      data, _status_code, _headers = get_lti_dispatch_with_http_info(dispatch_id, opts)
      data
    end

    # Get the information necessary to launch this dispatch using the IMS LTI 1.1 specification. 
    # Retrieve the information needed to launch this dispatch using the IMS LTI 1.1 specification. This information is then provided to the platform so it can launch this dispatch. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [Array<(DispatchLtiInfoSchema, Fixnum, Hash)>] DispatchLtiInfoSchema data, response status code and response headers
    def get_lti_dispatch_with_http_info(dispatch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.get_lti_dispatch ...'
      end
      # verify the required parameter 'dispatch_id' is set
      if dispatch_id.nil?
        fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.get_lti_dispatch"
      end
      # resource path
      local_var_path = '/dispatch/dispatches/{dispatchId}/lti'.sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DispatchLtiInfoSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_lti_dispatch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add tags to a Destination 
    # Applies the provided tags to the destination.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDestinations). 
    # @param destination_id Identifier for the destination
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_destination_tags(destination_id, tags, opts = {})
      put_destination_tags_with_http_info(destination_id, tags, opts)
      nil
    end

    # Add tags to a Destination 
    # Applies the provided tags to the destination.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDestinations). 
    # @param destination_id Identifier for the destination
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_destination_tags_with_http_info(destination_id, tags, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.put_destination_tags ...'
      end
      # verify the required parameter 'destination_id' is set
      if destination_id.nil?
        fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.put_destination_tags"
      end
      # verify the required parameter 'tags' is set
      if tags.nil?
        fail ArgumentError, "Missing the required parameter 'tags' when calling DispatchApi.put_destination_tags"
      end
      # resource path
      local_var_path = '/dispatch/destinations/{destinationId}/tags'.sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tags)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#put_destination_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a group of tags to a group of Destinations 
    # Applies all of the provided tags on all of the provided destinations.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDestinations). 
    # @param batch Array of ids, and array of tags for bulk tag operations
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_destination_tags_batch(batch, opts = {})
      put_destination_tags_batch_with_http_info(batch, opts)
      nil
    end

    # Add a group of tags to a group of Destinations 
    # Applies all of the provided tags on all of the provided destinations.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDestinations). 
    # @param batch Array of ids, and array of tags for bulk tag operations
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_destination_tags_batch_with_http_info(batch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.put_destination_tags_batch ...'
      end
      # verify the required parameter 'batch' is set
      if batch.nil?
        fail ArgumentError, "Missing the required parameter 'batch' when calling DispatchApi.put_destination_tags_batch"
      end
      # resource path
      local_var_path = '/dispatch/destinations/tags'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(batch)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#put_destination_tags_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add tags to a Dispatch 
    # Applies the provided tags to the dispatch.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDispatches). 
    # @param dispatch_id Identifier for the dispatch
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_dispatch_tags(dispatch_id, tags, opts = {})
      put_dispatch_tags_with_http_info(dispatch_id, tags, opts)
      nil
    end

    # Add tags to a Dispatch 
    # Applies the provided tags to the dispatch.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDispatches). 
    # @param dispatch_id Identifier for the dispatch
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_dispatch_tags_with_http_info(dispatch_id, tags, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.put_dispatch_tags ...'
      end
      # verify the required parameter 'dispatch_id' is set
      if dispatch_id.nil?
        fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.put_dispatch_tags"
      end
      # verify the required parameter 'tags' is set
      if tags.nil?
        fail ArgumentError, "Missing the required parameter 'tags' when calling DispatchApi.put_dispatch_tags"
      end
      # resource path
      local_var_path = '/dispatch/dispatches/{dispatchId}/tags'.sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tags)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#put_dispatch_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a group of tags to a group of Dispatches 
    # Applies all of the provided tags on all of the provided dispatches.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDispatches). 
    # @param batch Array of ids, and array of tags for bulk tag operations
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_dispatch_tags_batch(batch, opts = {})
      put_dispatch_tags_batch_with_http_info(batch, opts)
      nil
    end

    # Add a group of tags to a group of Dispatches 
    # Applies all of the provided tags on all of the provided dispatches.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDispatches). 
    # @param batch Array of ids, and array of tags for bulk tag operations
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_dispatch_tags_batch_with_http_info(batch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.put_dispatch_tags_batch ...'
      end
      # verify the required parameter 'batch' is set
      if batch.nil?
        fail ArgumentError, "Missing the required parameter 'batch' when calling DispatchApi.put_dispatch_tags_batch"
      end
      # resource path
      local_var_path = '/dispatch/dispatches/tags'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(batch)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#put_dispatch_tags_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset registration counts for a Destination's Dispatches 
    # Clears the registration count for all dispatches distributed to the destination.  This resets the registration counter on the dispatch itself, but has no effect on the existing registrations.  Can be used in situations where the license for the course material has been renewed. 
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reset_destination_dispatch_registration_count(destination_id, opts = {})
      reset_destination_dispatch_registration_count_with_http_info(destination_id, opts)
      nil
    end

    # Reset registration counts for a Destination&#39;s Dispatches 
    # Clears the registration count for all dispatches distributed to the destination.  This resets the registration counter on the dispatch itself, but has no effect on the existing registrations.  Can be used in situations where the license for the course material has been renewed. 
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reset_destination_dispatch_registration_count_with_http_info(destination_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.reset_destination_dispatch_registration_count ...'
      end
      # verify the required parameter 'destination_id' is set
      if destination_id.nil?
        fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.reset_destination_dispatch_registration_count"
      end
      # resource path
      local_var_path = '/dispatch/destinations/{destinationId}/dispatches/registrationCount'.sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#reset_destination_dispatch_registration_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset registration count for a Dispatch 
    # Clears the registration count for the dispatch.  This resets the registration counter on the dispatch itself, but has no effect on the existing registrations.  Can be used in situations where the license for the course material has been renewed. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reset_dispatch_registration_count(dispatch_id, opts = {})
      reset_dispatch_registration_count_with_http_info(dispatch_id, opts)
      nil
    end

    # Reset registration count for a Dispatch 
    # Clears the registration count for the dispatch.  This resets the registration counter on the dispatch itself, but has no effect on the existing registrations.  Can be used in situations where the license for the course material has been renewed. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reset_dispatch_registration_count_with_http_info(dispatch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.reset_dispatch_registration_count ...'
      end
      # verify the required parameter 'dispatch_id' is set
      if dispatch_id.nil?
        fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.reset_dispatch_registration_count"
      end
      # resource path
      local_var_path = '/dispatch/dispatches/{dispatchId}/registrationCount'.sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#reset_dispatch_registration_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update a Destination 
    # Creates or updates information about the destination.  -If the destination is being created, a name should be provided in the DestinationSchema.  If one is not present in the request an error will be thrown. -If the destination is instead being updated, only non-null values that are provided will be updated.  You may also optionally supply the e-mail address of the user to be associated with this destination.  This e-mail address should correspond to a SCORM Cloud user account.  >**Note:** >While the \"updated\" and \"created\" values are present in the destination schema, any attempts to manually change those values with SetDestination will be ignored. 
    # @param destination_id Identifier for the destination
    # @param destination 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_destination(destination_id, destination, opts = {})
      set_destination_with_http_info(destination_id, destination, opts)
      nil
    end

    # Create or update a Destination 
    # Creates or updates information about the destination.  -If the destination is being created, a name should be provided in the DestinationSchema.  If one is not present in the request an error will be thrown. -If the destination is instead being updated, only non-null values that are provided will be updated.  You may also optionally supply the e-mail address of the user to be associated with this destination.  This e-mail address should correspond to a SCORM Cloud user account.  &gt;**Note:** &gt;While the \&quot;updated\&quot; and \&quot;created\&quot; values are present in the destination schema, any attempts to manually change those values with SetDestination will be ignored. 
    # @param destination_id Identifier for the destination
    # @param destination 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_destination_with_http_info(destination_id, destination, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.set_destination ...'
      end
      # verify the required parameter 'destination_id' is set
      if destination_id.nil?
        fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.set_destination"
      end
      # verify the required parameter 'destination' is set
      if destination.nil?
        fail ArgumentError, "Missing the required parameter 'destination' when calling DispatchApi.set_destination"
      end
      # resource path
      local_var_path = '/dispatch/destinations/{destinationId}'.sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(destination)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#set_destination\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update enabled status for a Destination's Dispatches 
    # Updates the enabled status for all dispatches distributed to the destination.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
    # @param destination_id Identifier for the destination
    # @param enabled 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_destination_dispatch_enabled(destination_id, enabled, opts = {})
      set_destination_dispatch_enabled_with_http_info(destination_id, enabled, opts)
      nil
    end

    # Update enabled status for a Destination&#39;s Dispatches 
    # Updates the enabled status for all dispatches distributed to the destination.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
    # @param destination_id Identifier for the destination
    # @param enabled 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_destination_dispatch_enabled_with_http_info(destination_id, enabled, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.set_destination_dispatch_enabled ...'
      end
      # verify the required parameter 'destination_id' is set
      if destination_id.nil?
        fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.set_destination_dispatch_enabled"
      end
      # verify the required parameter 'enabled' is set
      if enabled.nil?
        fail ArgumentError, "Missing the required parameter 'enabled' when calling DispatchApi.set_destination_dispatch_enabled"
      end
      # resource path
      local_var_path = '/dispatch/destinations/{destinationId}/dispatches/enabled'.sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(enabled)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#set_destination_dispatch_enabled\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update enabled status for a Dispatch 
    # Updates the enabled status for the dispatch.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
    # @param dispatch_id Identifier for the dispatch
    # @param enabled 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_dispatch_enabled(dispatch_id, enabled, opts = {})
      set_dispatch_enabled_with_http_info(dispatch_id, enabled, opts)
      nil
    end

    # Update enabled status for a Dispatch 
    # Updates the enabled status for the dispatch.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
    # @param dispatch_id Identifier for the dispatch
    # @param enabled 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_dispatch_enabled_with_http_info(dispatch_id, enabled, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.set_dispatch_enabled ...'
      end
      # verify the required parameter 'dispatch_id' is set
      if dispatch_id.nil?
        fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.set_dispatch_enabled"
      end
      # verify the required parameter 'enabled' is set
      if enabled.nil?
        fail ArgumentError, "Missing the required parameter 'enabled' when calling DispatchApi.set_dispatch_enabled"
      end
      # resource path
      local_var_path = '/dispatch/dispatches/{dispatchId}/enabled'.sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(enabled)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#set_dispatch_enabled\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update user PII hashing status for a Destination
    # Updates user PII hashing status for the destination.  Enabling it will cause all user PII to be hashed. Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
    # @param destination_id Identifier for the destination
    # @param enabled 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_destination_hash_user_info(destination_id, enabled, opts = {})
      update_destination_hash_user_info_with_http_info(destination_id, enabled, opts)
      nil
    end

    # Update user PII hashing status for a Destination
    # Updates user PII hashing status for the destination.  Enabling it will cause all user PII to be hashed. Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
    # @param destination_id Identifier for the destination
    # @param enabled 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_destination_hash_user_info_with_http_info(destination_id, enabled, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.update_destination_hash_user_info ...'
      end
      # verify the required parameter 'destination_id' is set
      if destination_id.nil?
        fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.update_destination_hash_user_info"
      end
      # verify the required parameter 'enabled' is set
      if enabled.nil?
        fail ArgumentError, "Missing the required parameter 'enabled' when calling DispatchApi.update_destination_hash_user_info"
      end
      # resource path
      local_var_path = '/dispatch/destinations/{destinationId}/dispatches/hashUserInfo'.sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(enabled)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#update_destination_hash_user_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update information about a Dispatch 
    # Updates information about the dispatch, such as the expiration date and registration cap.  Only non-null values that are provided will be updated. 
    # @param dispatch_id Identifier for the dispatch
    # @param dispatch_properties 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_dispatch(dispatch_id, dispatch_properties, opts = {})
      update_dispatch_with_http_info(dispatch_id, dispatch_properties, opts)
      nil
    end

    # Update information about a Dispatch 
    # Updates information about the dispatch, such as the expiration date and registration cap.  Only non-null values that are provided will be updated. 
    # @param dispatch_id Identifier for the dispatch
    # @param dispatch_properties 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_dispatch_with_http_info(dispatch_id, dispatch_properties, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.update_dispatch ...'
      end
      # verify the required parameter 'dispatch_id' is set
      if dispatch_id.nil?
        fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.update_dispatch"
      end
      # verify the required parameter 'dispatch_properties' is set
      if dispatch_properties.nil?
        fail ArgumentError, "Missing the required parameter 'dispatch_properties' when calling DispatchApi.update_dispatch"
      end
      # resource path
      local_var_path = '/dispatch/dispatches/{dispatchId}'.sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dispatch_properties)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#update_dispatch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update user PII hashing status for a Dispatch
    # Updates user PII hashing status for the dispatch.  Enabling it will cause all user PII to be hashed. Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
    # @param dispatch_id Identifier for the dispatch
    # @param enabled 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_dispatch_hash_user_info(dispatch_id, enabled, opts = {})
      update_dispatch_hash_user_info_with_http_info(dispatch_id, enabled, opts)
      nil
    end

    # Update user PII hashing status for a Dispatch
    # Updates user PII hashing status for the dispatch.  Enabling it will cause all user PII to be hashed. Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
    # @param dispatch_id Identifier for the dispatch
    # @param enabled 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_dispatch_hash_user_info_with_http_info(dispatch_id, enabled, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.update_dispatch_hash_user_info ...'
      end
      # verify the required parameter 'dispatch_id' is set
      if dispatch_id.nil?
        fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.update_dispatch_hash_user_info"
      end
      # verify the required parameter 'enabled' is set
      if enabled.nil?
        fail ArgumentError, "Missing the required parameter 'enabled' when calling DispatchApi.update_dispatch_hash_user_info"
      end
      # resource path
      local_var_path = '/dispatch/dispatches/{dispatchId}/hashUserInfo'.sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(enabled)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#update_dispatch_hash_user_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a group of Dispatches 
    # Updates information about a group of dispatches, such as registration cap, expiration date, and postback information. Can be filtered using the request parameters to provide a subset of results.  >**Note:** >One of the filter parameters (i.e. `courseId`, `since`/`until`, `tags`, or `filter`) needs to be provided.  This is to prevent accidental modification of all dispatches.  If you do wish to update all dispatches, try setting the since parameter to a value prior to the creation of any dispatches.  >**Info:** >If using one of our client libraries, refer to its README for additional information on how to work with the `X-Total-Count` header. 
    # @param dispatch_properties 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only retrieve resources having &#x60;courseId&#x60;
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :datetime_filter Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (default to updated)
    # @option opts [Array<String>] :tags Filter items matching any tag provided (not all)
    # @option opts [String] :filter Optional string which filters results by a specified field (described by filterBy).
    # @option opts [String] :filter_by Optional enum parameter for specifying the field on which to run the filter.  (default to dispatch_id)
    # @return [nil]
    def update_dispatches(dispatch_properties, opts = {})
      update_dispatches_with_http_info(dispatch_properties, opts)
      nil
    end

    # Update a group of Dispatches 
    # Updates information about a group of dispatches, such as registration cap, expiration date, and postback information. Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;One of the filter parameters (i.e. &#x60;courseId&#x60;, &#x60;since&#x60;/&#x60;until&#x60;, &#x60;tags&#x60;, or &#x60;filter&#x60;) needs to be provided.  This is to prevent accidental modification of all dispatches.  If you do wish to update all dispatches, try setting the since parameter to a value prior to the creation of any dispatches.  &gt;**Info:** &gt;If using one of our client libraries, refer to its README for additional information on how to work with the &#x60;X-Total-Count&#x60; header. 
    # @param dispatch_properties 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only retrieve resources having &#x60;courseId&#x60;
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :datetime_filter Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against
    # @option opts [Array<String>] :tags Filter items matching any tag provided (not all)
    # @option opts [String] :filter Optional string which filters results by a specified field (described by filterBy).
    # @option opts [String] :filter_by Optional enum parameter for specifying the field on which to run the filter. 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_dispatches_with_http_info(dispatch_properties, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DispatchApi.update_dispatches ...'
      end
      # verify the required parameter 'dispatch_properties' is set
      if dispatch_properties.nil?
        fail ArgumentError, "Missing the required parameter 'dispatch_properties' when calling DispatchApi.update_dispatches"
      end
      # resource path
      local_var_path = '/dispatch/dispatches'

      # query parameters
      query_params = {}
      query_params[:'courseId'] = opts[:'course_id'] if !opts[:'course_id'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'datetimeFilter'] = opts[:'datetime_filter'] if !opts[:'datetime_filter'].nil?
      query_params[:'tags'] = @api_client.build_collection_param(opts[:'tags'], :csv) if !opts[:'tags'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'filterBy'] = opts[:'filter_by'] if !opts[:'filter_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dispatch_properties)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#update_dispatches\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
