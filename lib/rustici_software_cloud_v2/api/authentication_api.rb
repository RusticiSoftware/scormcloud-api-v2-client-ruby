=begin
#SCORM Cloud Rest API

#REST API used for SCORM Cloud integrations.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.27

=end

require 'uri'

module RusticiSoftwareCloudV2
  class AuthenticationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Obtain an OAuth token for scoped access to an Application 
    # Creates, signs and returns an OAuth2 token based on the provided permissions, if the credentials used to request the token have the permissions being requested.  >**Note:** >The token is not stored and therefore can not be modified or deleted.  The requested permissions are encoded in the token which is then signed. 
    # @param scope Space separated string of OAuth scopes, e.g. \&quot;write:course read:registration\&quot;. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :expiration Amount of seconds until the OAuth token expires.  (default to 300)
    # @return [ApplicationToken]
    def get_app_token(scope, opts = {})
      data, _status_code, _headers = get_app_token_with_http_info(scope, opts)
      data
    end

    # Obtain an OAuth token for scoped access to an Application 
    # Creates, signs and returns an OAuth2 token based on the provided permissions, if the credentials used to request the token have the permissions being requested.  &gt;**Note:** &gt;The token is not stored and therefore can not be modified or deleted.  The requested permissions are encoded in the token which is then signed. 
    # @param scope Space separated string of OAuth scopes, e.g. \&quot;write:course read:registration\&quot;. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :expiration Amount of seconds until the OAuth token expires. 
    # @return [Array<(ApplicationToken, Fixnum, Hash)>] ApplicationToken data, response status code and response headers
    def get_app_token_with_http_info(scope, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationApi.get_app_token ...'
      end
      # verify the required parameter 'scope' is set
      if scope.nil?
        fail ArgumentError, "Missing the required parameter 'scope' when calling AuthenticationApi.get_app_token"
      end
      # resource path
      local_var_path = '/oauth/authenticate/application/token'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['scope'] = scope
      form_params['expiration'] = opts[:'expiration'] if !opts[:'expiration'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplicationToken')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationApi#get_app_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
