=begin
#SCORM Cloud Rest API

#REST API used for SCORM Cloud integrations.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.27

=end

require 'uri'

module RusticiSoftwareCloudV2
  class ApplicationManagementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Use the Application Management App to create a new Application 
    # Creates an application.  Applications are how resources are grouped together in SCORM Cloud.  Any courses, registrations, etc. will only be accessible via the credentials for the application they belong to.  >**Note:** >Application IDs are unique in that we do not allow the user to supply a custom value for this field.  The ID of the newly created application will be specified in the response from this method.  >**Note:** >Each Realm has a special application called the **Application Management Application**.  When using this special application's credentials to authenticate with the API, you are able to perform actions on all the other applications within that Realm (and only those actions, this isn't a general purpose credential).  You can list, add, update, and delete both applications and credentials with this API resource. 
    # @param application_request 
    # @param [Hash] opts the optional parameters
    # @return [ApplicationSchema]
    def create_application(application_request, opts = {})
      data, _status_code, _headers = create_application_with_http_info(application_request, opts)
      data
    end

    # Use the Application Management App to create a new Application 
    # Creates an application.  Applications are how resources are grouped together in SCORM Cloud.  Any courses, registrations, etc. will only be accessible via the credentials for the application they belong to.  &gt;**Note:** &gt;Application IDs are unique in that we do not allow the user to supply a custom value for this field.  The ID of the newly created application will be specified in the response from this method.  &gt;**Note:** &gt;Each Realm has a special application called the **Application Management Application**.  When using this special application&#39;s credentials to authenticate with the API, you are able to perform actions on all the other applications within that Realm (and only those actions, this isn&#39;t a general purpose credential).  You can list, add, update, and delete both applications and credentials with this API resource. 
    # @param application_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplicationSchema, Fixnum, Hash)>] ApplicationSchema data, response status code and response headers
    def create_application_with_http_info(application_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationManagementApi.create_application ...'
      end
      # verify the required parameter 'application_request' is set
      if application_request.nil?
        fail ArgumentError, "Missing the required parameter 'application_request' when calling ApplicationManagementApi.create_application"
      end
      # resource path
      local_var_path = '/appManagement/applications'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(application_request)
      auth_names = ['APP_MANAGEMENT', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplicationSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#create_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Use the Application Manager App to create a new secret key for an Application 
    # Creates a new credential (aka secret key) for use with the child application.  The credential will be used alongside the `childAppId` for basic auth requests.  >**Note:** >Each Realm has a special application called the **Application Management Application**.  When using this special application's credentials to authenticate with the API, you are able to perform actions on all the other applications within that Realm (and only those actions, this isn't a general purpose credential).  You can list, add, update, and delete both applications and credentials with this API resource. 
    # @param child_app_id 
    # @param credential_request 
    # @param [Hash] opts the optional parameters
    # @return [CredentialCreatedSchema]
    def create_credential(child_app_id, credential_request, opts = {})
      data, _status_code, _headers = create_credential_with_http_info(child_app_id, credential_request, opts)
      data
    end

    # Use the Application Manager App to create a new secret key for an Application 
    # Creates a new credential (aka secret key) for use with the child application.  The credential will be used alongside the &#x60;childAppId&#x60; for basic auth requests.  &gt;**Note:** &gt;Each Realm has a special application called the **Application Management Application**.  When using this special application&#39;s credentials to authenticate with the API, you are able to perform actions on all the other applications within that Realm (and only those actions, this isn&#39;t a general purpose credential).  You can list, add, update, and delete both applications and credentials with this API resource. 
    # @param child_app_id 
    # @param credential_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CredentialCreatedSchema, Fixnum, Hash)>] CredentialCreatedSchema data, response status code and response headers
    def create_credential_with_http_info(child_app_id, credential_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationManagementApi.create_credential ...'
      end
      # verify the required parameter 'child_app_id' is set
      if child_app_id.nil?
        fail ArgumentError, "Missing the required parameter 'child_app_id' when calling ApplicationManagementApi.create_credential"
      end
      # verify the required parameter 'credential_request' is set
      if credential_request.nil?
        fail ArgumentError, "Missing the required parameter 'credential_request' when calling ApplicationManagementApi.create_credential"
      end
      # resource path
      local_var_path = '/appManagement/{childAppId}/credentials'.sub('{' + 'childAppId' + '}', child_app_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(credential_request)
      auth_names = ['APP_MANAGEMENT', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CredentialCreatedSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#create_credential\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtain an OAuth token for scoped access to an Application 
    # Creates, signs and returns an OAuth2 token based on the provided permissions, if the credentials used to request the token have the permissions being requested.  >**Note:** >The token is not stored and therefore can not be modified or deleted.  The requested permissions are encoded in the token which is then signed. 
    # @param token_request 
    # @param [Hash] opts the optional parameters
    # @return [StringResultSchema]
    def create_token(token_request, opts = {})
      data, _status_code, _headers = create_token_with_http_info(token_request, opts)
      data
    end

    # Obtain an OAuth token for scoped access to an Application 
    # Creates, signs and returns an OAuth2 token based on the provided permissions, if the credentials used to request the token have the permissions being requested.  &gt;**Note:** &gt;The token is not stored and therefore can not be modified or deleted.  The requested permissions are encoded in the token which is then signed. 
    # @param token_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringResultSchema, Fixnum, Hash)>] StringResultSchema data, response status code and response headers
    def create_token_with_http_info(token_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationManagementApi.create_token ...'
      end
      # verify the required parameter 'token_request' is set
      if token_request.nil?
        fail ArgumentError, "Missing the required parameter 'token_request' when calling ApplicationManagementApi.create_token"
      end
      # resource path
      local_var_path = '/appManagement/token'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(token_request)
      auth_names = ['APP_NORMAL']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StringResultSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#create_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Use the Application Management App to delete an Application 
    # Deletes the specified application.  All content within an application must be removed in order to allow deletion.  >**Note:** >Each Realm has a special application called the **Application Management Application**.  When using this special application's credentials to authenticate with the API, you are able to perform actions on all the other applications within that Realm (and only those actions, this isn't a general purpose credential).  You can list, add, update, and delete both applications and credentials with this API resource. 
    # @param child_app_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_application(child_app_id, opts = {})
      delete_application_with_http_info(child_app_id, opts)
      nil
    end

    # Use the Application Management App to delete an Application 
    # Deletes the specified application.  All content within an application must be removed in order to allow deletion.  &gt;**Note:** &gt;Each Realm has a special application called the **Application Management Application**.  When using this special application&#39;s credentials to authenticate with the API, you are able to perform actions on all the other applications within that Realm (and only those actions, this isn&#39;t a general purpose credential).  You can list, add, update, and delete both applications and credentials with this API resource. 
    # @param child_app_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_application_with_http_info(child_app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationManagementApi.delete_application ...'
      end
      # verify the required parameter 'child_app_id' is set
      if child_app_id.nil?
        fail ArgumentError, "Missing the required parameter 'child_app_id' when calling ApplicationManagementApi.delete_application"
      end
      # resource path
      local_var_path = '/appManagement/applications/{childAppId}'.sub('{' + 'childAppId' + '}', child_app_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_MANAGEMENT', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#delete_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a configuration setting explicitly set for an Application 
    # Clears the specified setting from the application.  This causes the setting to inherit a value from a higher level (e.g. system default if deleting from application, application level if deleting from learning standard). If the configuration setting was not set at the application level it will continue to persist and will require deletion from the level it was set. 
    # @param setting_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :learning_standard If specified, the request will be scoped to the provided learning standard.
    # @option opts [BOOLEAN] :single_sco Required if &#x60;learningStandard&#x60; is specified. Scopes settings to either single or multi-SCO content. 
    # @return [nil]
    def delete_application_configuration_setting(setting_id, opts = {})
      delete_application_configuration_setting_with_http_info(setting_id, opts)
      nil
    end

    # Delete a configuration setting explicitly set for an Application 
    # Clears the specified setting from the application.  This causes the setting to inherit a value from a higher level (e.g. system default if deleting from application, application level if deleting from learning standard). If the configuration setting was not set at the application level it will continue to persist and will require deletion from the level it was set. 
    # @param setting_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :learning_standard If specified, the request will be scoped to the provided learning standard.
    # @option opts [BOOLEAN] :single_sco Required if &#x60;learningStandard&#x60; is specified. Scopes settings to either single or multi-SCO content. 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_application_configuration_setting_with_http_info(setting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationManagementApi.delete_application_configuration_setting ...'
      end
      # verify the required parameter 'setting_id' is set
      if setting_id.nil?
        fail ArgumentError, "Missing the required parameter 'setting_id' when calling ApplicationManagementApi.delete_application_configuration_setting"
      end
      # resource path
      local_var_path = '/appManagement/configuration/{settingId}'.sub('{' + 'settingId' + '}', setting_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'learningStandard'] = opts[:'learning_standard'] if !opts[:'learning_standard'].nil?
      query_params[:'singleSco'] = opts[:'single_sco'] if !opts[:'single_sco'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#delete_application_configuration_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Use the Application Management App to delete a secret key from an Application 
    # Deletes a credential belonging to the child application.  >**Caution:** >If the last secret key for an application is deleted it will not be able to use the SCORM Cloud API until another key is granted to it via `CreateCredential`.  It may also disable some website privileges.  >**Note:** >Each Realm has a special application called the **Application Management Application**.  When using this special application's credentials to authenticate with the API, you are able to perform actions on all the other applications within that Realm (and only those actions, this isn't a general purpose credential).  You can list, add, update, and delete both applications and credentials with this API resource. 
    # @param child_app_id 
    # @param credential_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_credential(child_app_id, credential_id, opts = {})
      delete_credential_with_http_info(child_app_id, credential_id, opts)
      nil
    end

    # Use the Application Management App to delete a secret key from an Application 
    # Deletes a credential belonging to the child application.  &gt;**Caution:** &gt;If the last secret key for an application is deleted it will not be able to use the SCORM Cloud API until another key is granted to it via &#x60;CreateCredential&#x60;.  It may also disable some website privileges.  &gt;**Note:** &gt;Each Realm has a special application called the **Application Management Application**.  When using this special application&#39;s credentials to authenticate with the API, you are able to perform actions on all the other applications within that Realm (and only those actions, this isn&#39;t a general purpose credential).  You can list, add, update, and delete both applications and credentials with this API resource. 
    # @param child_app_id 
    # @param credential_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_credential_with_http_info(child_app_id, credential_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationManagementApi.delete_credential ...'
      end
      # verify the required parameter 'child_app_id' is set
      if child_app_id.nil?
        fail ArgumentError, "Missing the required parameter 'child_app_id' when calling ApplicationManagementApi.delete_credential"
      end
      # verify the required parameter 'credential_id' is set
      if credential_id.nil?
        fail ArgumentError, "Missing the required parameter 'credential_id' when calling ApplicationManagementApi.delete_credential"
      end
      # resource path
      local_var_path = '/appManagement/{childAppId}/credentials/{credentialId}'.sub('{' + 'childAppId' + '}', child_app_id.to_s).sub('{' + 'credentialId' + '}', credential_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_MANAGEMENT', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#delete_credential\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get effective configuration settings for an Application 
    # Returns the effective configuration settings for the application.  Configuration settings at the application level will apply to all items within that application (courses, registrations, etc.).  If there is a configuration setting present at a more specific level (course, registration, etc.), that setting will override the one set at the application level.  >**Note:** >This resource lists configuration for two groupings of content: >- ALL content in an application.  This is achieved by leaving `learningStandard` and   `singleSco` as `null`.  Anything set at the learningStandard/singleSco level will take precedence over these   settings. >- Content falling into a learningStandard/singleSco category.  This allows setting more specific   defaults for a particular learningStandard/singleSco combination.   _Note: both `learningStandard` and `singleSco` must be provided, as this level is considered to be   identified by those items joined._ 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :learning_standard If specified, the request will be scoped to the provided learning standard.
    # @option opts [BOOLEAN] :single_sco Required if &#x60;learningStandard&#x60; is specified. Scopes settings to either single or multi-SCO content. 
    # @option opts [BOOLEAN] :include_metadata  (default to false)
    # @return [SettingListSchema]
    def get_application_configuration(opts = {})
      data, _status_code, _headers = get_application_configuration_with_http_info(opts)
      data
    end

    # Get effective configuration settings for an Application 
    # Returns the effective configuration settings for the application.  Configuration settings at the application level will apply to all items within that application (courses, registrations, etc.).  If there is a configuration setting present at a more specific level (course, registration, etc.), that setting will override the one set at the application level.  &gt;**Note:** &gt;This resource lists configuration for two groupings of content: &gt;- ALL content in an application.  This is achieved by leaving &#x60;learningStandard&#x60; and   &#x60;singleSco&#x60; as &#x60;null&#x60;.  Anything set at the learningStandard/singleSco level will take precedence over these   settings. &gt;- Content falling into a learningStandard/singleSco category.  This allows setting more specific   defaults for a particular learningStandard/singleSco combination.   _Note: both &#x60;learningStandard&#x60; and &#x60;singleSco&#x60; must be provided, as this level is considered to be   identified by those items joined._ 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :learning_standard If specified, the request will be scoped to the provided learning standard.
    # @option opts [BOOLEAN] :single_sco Required if &#x60;learningStandard&#x60; is specified. Scopes settings to either single or multi-SCO content. 
    # @option opts [BOOLEAN] :include_metadata 
    # @return [Array<(SettingListSchema, Fixnum, Hash)>] SettingListSchema data, response status code and response headers
    def get_application_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationManagementApi.get_application_configuration ...'
      end
      # resource path
      local_var_path = '/appManagement/configuration'

      # query parameters
      query_params = {}
      query_params[:'learningStandard'] = opts[:'learning_standard'] if !opts[:'learning_standard'].nil?
      query_params[:'singleSco'] = opts[:'single_sco'] if !opts[:'single_sco'].nil?
      query_params[:'includeMetadata'] = opts[:'include_metadata'] if !opts[:'include_metadata'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SettingListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#get_application_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Use the Application Management App to get detailed information about an Application 
    # Returns detailed information about the application.  This includes name, create date, and delete permissions.  >**Note:** >Each Realm has a special application called the **Application Management Application**.  When using this special application's credentials to authenticate with the API, you are able to perform actions on all the other applications within that Realm (and only those actions, this isn't a general purpose credential).  You can list, add, update, and delete both applications and credentials with this API resource. 
    # @param child_app_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_course_count Include a count of courses for the application. (default to false)
    # @option opts [BOOLEAN] :include_registration_count Include a count of registrations created for the application during the current billing period. (default to false)
    # @return [ApplicationInfoSchema]
    def get_application_info(child_app_id, opts = {})
      data, _status_code, _headers = get_application_info_with_http_info(child_app_id, opts)
      data
    end

    # Use the Application Management App to get detailed information about an Application 
    # Returns detailed information about the application.  This includes name, create date, and delete permissions.  &gt;**Note:** &gt;Each Realm has a special application called the **Application Management Application**.  When using this special application&#39;s credentials to authenticate with the API, you are able to perform actions on all the other applications within that Realm (and only those actions, this isn&#39;t a general purpose credential).  You can list, add, update, and delete both applications and credentials with this API resource. 
    # @param child_app_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_course_count Include a count of courses for the application.
    # @option opts [BOOLEAN] :include_registration_count Include a count of registrations created for the application during the current billing period.
    # @return [Array<(ApplicationInfoSchema, Fixnum, Hash)>] ApplicationInfoSchema data, response status code and response headers
    def get_application_info_with_http_info(child_app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationManagementApi.get_application_info ...'
      end
      # verify the required parameter 'child_app_id' is set
      if child_app_id.nil?
        fail ArgumentError, "Missing the required parameter 'child_app_id' when calling ApplicationManagementApi.get_application_info"
      end
      # resource path
      local_var_path = '/appManagement/applications/{childAppId}'.sub('{' + 'childAppId' + '}', child_app_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeCourseCount'] = opts[:'include_course_count'] if !opts[:'include_course_count'].nil?
      query_params[:'includeRegistrationCount'] = opts[:'include_registration_count'] if !opts[:'include_registration_count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_MANAGEMENT', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplicationInfoSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#get_application_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Use the Application Management App to get a list of Applications 
    # Returns a list of all applications which are in this Realm.  >**Note:** >Each Realm has a special application called the **Application Management Application**.  When using this special application's credentials to authenticate with the API, you are able to perform actions on all the other applications within that Realm (and only those actions, this isn't a general purpose credential).  You can list, add, update, and delete both applications and credentials with this API resource. 
    # @param [Hash] opts the optional parameters
    # @return [ApplicationListSchema]
    def get_application_list(opts = {})
      data, _status_code, _headers = get_application_list_with_http_info(opts)
      data
    end

    # Use the Application Management App to get a list of Applications 
    # Returns a list of all applications which are in this Realm.  &gt;**Note:** &gt;Each Realm has a special application called the **Application Management Application**.  When using this special application&#39;s credentials to authenticate with the API, you are able to perform actions on all the other applications within that Realm (and only those actions, this isn&#39;t a general purpose credential).  You can list, add, update, and delete both applications and credentials with this API resource. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplicationListSchema, Fixnum, Hash)>] ApplicationListSchema data, response status code and response headers
    def get_application_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationManagementApi.get_application_list ...'
      end
      # resource path
      local_var_path = '/appManagement/applications'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_MANAGEMENT', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplicationListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#get_application_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Use the Application Manager App to get a list of secret keys for an Application 
    # Returns a list of all the credentials (aka secret keys) belonging to the child application.  >**Note:** >Each Realm has a special application called the **Application Management Application**.  When using this special application's credentials to authenticate with the API, you are able to perform actions on all the other applications within that Realm (and only those actions, this isn't a general purpose credential).  You can list, add, update, and delete both applications and credentials with this API resource. 
    # @param child_app_id 
    # @param [Hash] opts the optional parameters
    # @return [CredentialListSchema]
    def get_credentials(child_app_id, opts = {})
      data, _status_code, _headers = get_credentials_with_http_info(child_app_id, opts)
      data
    end

    # Use the Application Manager App to get a list of secret keys for an Application 
    # Returns a list of all the credentials (aka secret keys) belonging to the child application.  &gt;**Note:** &gt;Each Realm has a special application called the **Application Management Application**.  When using this special application&#39;s credentials to authenticate with the API, you are able to perform actions on all the other applications within that Realm (and only those actions, this isn&#39;t a general purpose credential).  You can list, add, update, and delete both applications and credentials with this API resource. 
    # @param child_app_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CredentialListSchema, Fixnum, Hash)>] CredentialListSchema data, response status code and response headers
    def get_credentials_with_http_info(child_app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationManagementApi.get_credentials ...'
      end
      # verify the required parameter 'child_app_id' is set
      if child_app_id.nil?
        fail ArgumentError, "Missing the required parameter 'child_app_id' when calling ApplicationManagementApi.get_credentials"
      end
      # resource path
      local_var_path = '/appManagement/{childAppId}/credentials'.sub('{' + 'childAppId' + '}', child_app_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_MANAGEMENT', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CredentialListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#get_credentials\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update configuration settings for an Application 
    # Updates configuration settings at the application level.  This will explicitly set a value at the applicaiton level.  These settings will affect all items within the application which do not have their own explicit configuration set.  This can effectively be used to set application level defaults. 
    # @param configuration_settings 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :learning_standard If specified, the request will be scoped to the provided learning standard.
    # @option opts [BOOLEAN] :single_sco Required if &#x60;learningStandard&#x60; is specified. Scopes settings to either single or multi-SCO content. 
    # @return [nil]
    def set_application_configuration(configuration_settings, opts = {})
      set_application_configuration_with_http_info(configuration_settings, opts)
      nil
    end

    # Update configuration settings for an Application 
    # Updates configuration settings at the application level.  This will explicitly set a value at the applicaiton level.  These settings will affect all items within the application which do not have their own explicit configuration set.  This can effectively be used to set application level defaults. 
    # @param configuration_settings 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :learning_standard If specified, the request will be scoped to the provided learning standard.
    # @option opts [BOOLEAN] :single_sco Required if &#x60;learningStandard&#x60; is specified. Scopes settings to either single or multi-SCO content. 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_application_configuration_with_http_info(configuration_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationManagementApi.set_application_configuration ...'
      end
      # verify the required parameter 'configuration_settings' is set
      if configuration_settings.nil?
        fail ArgumentError, "Missing the required parameter 'configuration_settings' when calling ApplicationManagementApi.set_application_configuration"
      end
      # resource path
      local_var_path = '/appManagement/configuration'

      # query parameters
      query_params = {}
      query_params[:'learningStandard'] = opts[:'learning_standard'] if !opts[:'learning_standard'].nil?
      query_params[:'singleSco'] = opts[:'single_sco'] if !opts[:'single_sco'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(configuration_settings)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#set_application_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Use the Application Management App to update information about an Application 
    # Updates information about the application, such as the name and enabling/ disabling deletion operations for the application.  >**Note:** >Each Realm has a special application called the **Application Management Application**.  When using this special application's credentials to authenticate with the API, you are able to perform actions on all the other applications within that Realm (and only those actions, this isn't a general purpose credential).  You can list, add, update, and delete both applications and credentials with this API resource. 
    # @param child_app_id 
    # @param application_properties 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_application(child_app_id, application_properties, opts = {})
      update_application_with_http_info(child_app_id, application_properties, opts)
      nil
    end

    # Use the Application Management App to update information about an Application 
    # Updates information about the application, such as the name and enabling/ disabling deletion operations for the application.  &gt;**Note:** &gt;Each Realm has a special application called the **Application Management Application**.  When using this special application&#39;s credentials to authenticate with the API, you are able to perform actions on all the other applications within that Realm (and only those actions, this isn&#39;t a general purpose credential).  You can list, add, update, and delete both applications and credentials with this API resource. 
    # @param child_app_id 
    # @param application_properties 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_application_with_http_info(child_app_id, application_properties, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationManagementApi.update_application ...'
      end
      # verify the required parameter 'child_app_id' is set
      if child_app_id.nil?
        fail ArgumentError, "Missing the required parameter 'child_app_id' when calling ApplicationManagementApi.update_application"
      end
      # verify the required parameter 'application_properties' is set
      if application_properties.nil?
        fail ArgumentError, "Missing the required parameter 'application_properties' when calling ApplicationManagementApi.update_application"
      end
      # resource path
      local_var_path = '/appManagement/applications/{childAppId}'.sub('{' + 'childAppId' + '}', child_app_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(application_properties)
      auth_names = ['APP_MANAGEMENT', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#update_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Use the Application Manager App to update an existing secret key for an Application 
    # Updates the name or status associated with the credential.  Disabling a credential will cause it to no longer be valid for authorization through the API.  >**Caution:** >If the last (or only) key for an application is disabled it may affect some website privileges.  >**Note:** >Each Realm has a special application called the **Application Management Application**.  When using this special application's credentials to authenticate with the API, you are able to perform actions on all the other applications within that Realm (and only those actions, this isn't a general purpose credential).  You can list, add, update, and delete both applications and credentials with this API resource. 
    # @param child_app_id 
    # @param credential_id 
    # @param credential_update 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_credential(child_app_id, credential_id, credential_update, opts = {})
      update_credential_with_http_info(child_app_id, credential_id, credential_update, opts)
      nil
    end

    # Use the Application Manager App to update an existing secret key for an Application 
    # Updates the name or status associated with the credential.  Disabling a credential will cause it to no longer be valid for authorization through the API.  &gt;**Caution:** &gt;If the last (or only) key for an application is disabled it may affect some website privileges.  &gt;**Note:** &gt;Each Realm has a special application called the **Application Management Application**.  When using this special application&#39;s credentials to authenticate with the API, you are able to perform actions on all the other applications within that Realm (and only those actions, this isn&#39;t a general purpose credential).  You can list, add, update, and delete both applications and credentials with this API resource. 
    # @param child_app_id 
    # @param credential_id 
    # @param credential_update 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_credential_with_http_info(child_app_id, credential_id, credential_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationManagementApi.update_credential ...'
      end
      # verify the required parameter 'child_app_id' is set
      if child_app_id.nil?
        fail ArgumentError, "Missing the required parameter 'child_app_id' when calling ApplicationManagementApi.update_credential"
      end
      # verify the required parameter 'credential_id' is set
      if credential_id.nil?
        fail ArgumentError, "Missing the required parameter 'credential_id' when calling ApplicationManagementApi.update_credential"
      end
      # verify the required parameter 'credential_update' is set
      if credential_update.nil?
        fail ArgumentError, "Missing the required parameter 'credential_update' when calling ApplicationManagementApi.update_credential"
      end
      # resource path
      local_var_path = '/appManagement/{childAppId}/credentials/{credentialId}'.sub('{' + 'childAppId' + '}', child_app_id.to_s).sub('{' + 'credentialId' + '}', credential_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(credential_update)
      auth_names = ['APP_MANAGEMENT', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#update_credential\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
