=begin
#SCORM Cloud Rest API

#REST API used for SCORM Cloud integrations.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.27

=end

require 'uri'

module RusticiSoftwareCloudV2
  class RegistrationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a launch link for a Registration 
    # Returns the launch link to use to launch the course for the registration.   Launch links are meant as a way to provide access to your content.  When a learner visits the link, the course will be launched and registration progress will start to be tracked. 
    # @param registration_id 
    # @param launch_link_request 
    # @param [Hash] opts the optional parameters
    # @return [LaunchLinkSchema]
    def build_registration_launch_link(registration_id, launch_link_request, opts = {})
      data, _status_code, _headers = build_registration_launch_link_with_http_info(registration_id, launch_link_request, opts)
      data
    end

    # Get a launch link for a Registration 
    # Returns the launch link to use to launch the course for the registration.   Launch links are meant as a way to provide access to your content.  When a learner visits the link, the course will be launched and registration progress will start to be tracked. 
    # @param registration_id 
    # @param launch_link_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LaunchLinkSchema, Fixnum, Hash)>] LaunchLinkSchema data, response status code and response headers
    def build_registration_launch_link_with_http_info(registration_id, launch_link_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.build_registration_launch_link ...'
      end
      # verify the required parameter 'registration_id' is set
      if registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.build_registration_launch_link"
      end
      # verify the required parameter 'launch_link_request' is set
      if launch_link_request.nil?
        fail ArgumentError, "Missing the required parameter 'launch_link_request' when calling RegistrationApi.build_registration_launch_link"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/launchLink'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(launch_link_request)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LaunchLinkSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#build_registration_launch_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Registration Instance 
    # Creates a new instance of the registration.  Registration instances will be automatically created when a learner launches a new version of the course.  This allows for tracking registration progress for each of the versions of the course the learner has taken.  When the created registration instance is \"launched\", the course specified at creation time will be launched. 
    # @param registration_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_new_registration_instance(registration_id, opts = {})
      create_new_registration_instance_with_http_info(registration_id, opts)
      nil
    end

    # Create a Registration Instance 
    # Creates a new instance of the registration.  Registration instances will be automatically created when a learner launches a new version of the course.  This allows for tracking registration progress for each of the versions of the course the learner has taken.  When the created registration instance is \&quot;launched\&quot;, the course specified at creation time will be launched. 
    # @param registration_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_new_registration_instance_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.create_new_registration_instance ...'
      end
      # verify the required parameter 'registration_id' is set
      if registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.create_new_registration_instance"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/instances'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#create_new_registration_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Registration 
    # Creates a new registration.  Registrations are the billable unit in SCORM Cloud, and represent a link between a learner and a course.  A registration will contain a few pieces of information such as learner identifiers, the id of the course being registered for, and several other optional fields. A registration must be tied to a specific course at creation time.  When the created registration is \"launched\", the course specified at creation time will be launched. 
    # @param registration 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :course_version Unless you have a reason for using this you probably do not need to. 
    # @return [nil]
    def create_registration(registration, opts = {})
      create_registration_with_http_info(registration, opts)
      nil
    end

    # Create a Registration 
    # Creates a new registration.  Registrations are the billable unit in SCORM Cloud, and represent a link between a learner and a course.  A registration will contain a few pieces of information such as learner identifiers, the id of the course being registered for, and several other optional fields. A registration must be tied to a specific course at creation time.  When the created registration is \&quot;launched\&quot;, the course specified at creation time will be launched. 
    # @param registration 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :course_version Unless you have a reason for using this you probably do not need to. 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_registration_with_http_info(registration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.create_registration ...'
      end
      # verify the required parameter 'registration' is set
      if registration.nil?
        fail ArgumentError, "Missing the required parameter 'registration' when calling RegistrationApi.create_registration"
      end
      # resource path
      local_var_path = '/registrations'

      # query parameters
      query_params = {}
      query_params[:'courseVersion'] = opts[:'course_version'] if !opts[:'course_version'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(registration)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#create_registration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Registration 
    # Deletes the specified registration.  >**Caution:** >This will also delete all instances of the registration. 
    # @param registration_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_registration(registration_id, opts = {})
      delete_registration_with_http_info(registration_id, opts)
      nil
    end

    # Delete a Registration 
    # Deletes the specified registration.  &gt;**Caution:** &gt;This will also delete all instances of the registration. 
    # @param registration_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_registration_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.delete_registration ...'
      end
      # verify the required parameter 'registration_id' is set
      if registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.delete_registration"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#delete_registration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a configuration setting explicitly set for a Registration 
    # Clears the specified setting from the registration.  This causes the setting to inherit a value from a higher level (e.g. course).  If the configuration setting was not set at the registration level it will continue to persist and will require deletion from the level it was set. 
    # @param registration_id 
    # @param setting_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_registration_configuration_setting(registration_id, setting_id, opts = {})
      delete_registration_configuration_setting_with_http_info(registration_id, setting_id, opts)
      nil
    end

    # Delete a configuration setting explicitly set for a Registration 
    # Clears the specified setting from the registration.  This causes the setting to inherit a value from a higher level (e.g. course).  If the configuration setting was not set at the registration level it will continue to persist and will require deletion from the level it was set. 
    # @param registration_id 
    # @param setting_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_registration_configuration_setting_with_http_info(registration_id, setting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.delete_registration_configuration_setting ...'
      end
      # verify the required parameter 'registration_id' is set
      if registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.delete_registration_configuration_setting"
      end
      # verify the required parameter 'setting_id' is set
      if setting_id.nil?
        fail ArgumentError, "Missing the required parameter 'setting_id' when calling RegistrationApi.delete_registration_configuration_setting"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/configuration/{settingId}'.sub('{' + 'registrationId' + '}', registration_id.to_s).sub('{' + 'settingId' + '}', setting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#delete_registration_configuration_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset global data for a Registration 
    # Deletes the global data associated with the registration, but the registration itself will remain.  This means any progress towards the global objectives will be removed. 
    # @param registration_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_registration_global_data(registration_id, opts = {})
      delete_registration_global_data_with_http_info(registration_id, opts)
      nil
    end

    # Reset global data for a Registration 
    # Deletes the global data associated with the registration, but the registration itself will remain.  This means any progress towards the global objectives will be removed. 
    # @param registration_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_registration_global_data_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.delete_registration_global_data ...'
      end
      # verify the required parameter 'registration_id' is set
      if registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.delete_registration_global_data"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/globalData'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#delete_registration_global_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Registration Instance 
    # Deletes the specified instance of the registration.  If deleting the last remaining instance of the registration, the registration itself will be deleted along with any associated data. 
    # @param registration_id 
    # @param instance_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_registration_instance(registration_id, instance_id, opts = {})
      delete_registration_instance_with_http_info(registration_id, instance_id, opts)
      nil
    end

    # Delete a Registration Instance 
    # Deletes the specified instance of the registration.  If deleting the last remaining instance of the registration, the registration itself will be deleted along with any associated data. 
    # @param registration_id 
    # @param instance_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_registration_instance_with_http_info(registration_id, instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.delete_registration_instance ...'
      end
      # verify the required parameter 'registration_id' is set
      if registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.delete_registration_instance"
      end
      # verify the required parameter 'instance_id' is set
      if instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling RegistrationApi.delete_registration_instance"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/instances/{instanceId}'.sub('{' + 'registrationId' + '}', registration_id.to_s).sub('{' + 'instanceId' + '}', instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#delete_registration_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a configuration setting explicitly set for a Registration Instance 
    # Clears the specified setting from the registration instance.  This causes the setting to inherit a value from a higher level (e.g. course).  If the configuration setting was not set at the registration level it will continue to persist and will require deletion from the level it was set. 
    # @param registration_id 
    # @param instance_id 
    # @param setting_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_registration_instance_configuration_setting(registration_id, instance_id, setting_id, opts = {})
      delete_registration_instance_configuration_setting_with_http_info(registration_id, instance_id, setting_id, opts)
      nil
    end

    # Delete a configuration setting explicitly set for a Registration Instance 
    # Clears the specified setting from the registration instance.  This causes the setting to inherit a value from a higher level (e.g. course).  If the configuration setting was not set at the registration level it will continue to persist and will require deletion from the level it was set. 
    # @param registration_id 
    # @param instance_id 
    # @param setting_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_registration_instance_configuration_setting_with_http_info(registration_id, instance_id, setting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.delete_registration_instance_configuration_setting ...'
      end
      # verify the required parameter 'registration_id' is set
      if registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.delete_registration_instance_configuration_setting"
      end
      # verify the required parameter 'instance_id' is set
      if instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling RegistrationApi.delete_registration_instance_configuration_setting"
      end
      # verify the required parameter 'setting_id' is set
      if setting_id.nil?
        fail ArgumentError, "Missing the required parameter 'setting_id' when calling RegistrationApi.delete_registration_instance_configuration_setting"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/instances/{instanceId}/configuration/{settingId}'.sub('{' + 'registrationId' + '}', registration_id.to_s).sub('{' + 'instanceId' + '}', instance_id.to_s).sub('{' + 'settingId' + '}', setting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#delete_registration_instance_configuration_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset a Registration 
    # Deletes the data associated with the registration, but the registration itself will remain.  This means any of the launch history, and progress will be removed.  After the data has been deleted, the registration will automatically register itself for the latest version of the course. 
    # @param registration_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_registration_progress(registration_id, opts = {})
      delete_registration_progress_with_http_info(registration_id, opts)
      nil
    end

    # Reset a Registration 
    # Deletes the data associated with the registration, but the registration itself will remain.  This means any of the launch history, and progress will be removed.  After the data has been deleted, the registration will automatically register itself for the latest version of the course. 
    # @param registration_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_registration_progress_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.delete_registration_progress ...'
      end
      # verify the required parameter 'registration_id' is set
      if registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.delete_registration_progress"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/progress'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#delete_registration_progress\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete tags from a Registration 
    # Deletes the specified tags from the registration.  Deleting tags that do not exist will still result in a success. 
    # @param registration_id 
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_registration_tags(registration_id, tags, opts = {})
      delete_registration_tags_with_http_info(registration_id, tags, opts)
      nil
    end

    # Delete tags from a Registration 
    # Deletes the specified tags from the registration.  Deleting tags that do not exist will still result in a success. 
    # @param registration_id 
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_registration_tags_with_http_info(registration_id, tags, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.delete_registration_tags ...'
      end
      # verify the required parameter 'registration_id' is set
      if registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.delete_registration_tags"
      end
      # verify the required parameter 'tags' is set
      if tags.nil?
        fail ArgumentError, "Missing the required parameter 'tags' when calling RegistrationApi.delete_registration_tags"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/tags'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tags)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#delete_registration_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Check that a Registration exists 
    # Checks that the registration exists within SCORM Cloud.  >**Info:** >No registration data will be returned for this call. A successful `200` response indicates that the registration exists. If the registration does not exist, a `404` error will be returned instead. If you are looking for information about the registration, try calling `GetRegistrationProgress` instead. 
    # @param registration_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_registration(registration_id, opts = {})
      get_registration_with_http_info(registration_id, opts)
      nil
    end

    # Check that a Registration exists 
    # Checks that the registration exists within SCORM Cloud.  &gt;**Info:** &gt;No registration data will be returned for this call. A successful &#x60;200&#x60; response indicates that the registration exists. If the registration does not exist, a &#x60;404&#x60; error will be returned instead. If you are looking for information about the registration, try calling &#x60;GetRegistrationProgress&#x60; instead. 
    # @param registration_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_registration_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.get_registration ...'
      end
      # verify the required parameter 'registration_id' is set
      if registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:HEAD, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get effective configuration settings for a Registration 
    # Returns the effective configuration settings for the registration.  If not set at the registration level, the setting will inherit a value from a higher level (e.g. course).  Registrations are the bottom most level in the configuration hierarchy, so the values present at the registration level will be what are used when a course is launched. 
    # @param registration_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_metadata  (default to false)
    # @return [SettingListSchema]
    def get_registration_configuration(registration_id, opts = {})
      data, _status_code, _headers = get_registration_configuration_with_http_info(registration_id, opts)
      data
    end

    # Get effective configuration settings for a Registration 
    # Returns the effective configuration settings for the registration.  If not set at the registration level, the setting will inherit a value from a higher level (e.g. course).  Registrations are the bottom most level in the configuration hierarchy, so the values present at the registration level will be what are used when a course is launched. 
    # @param registration_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_metadata 
    # @return [Array<(SettingListSchema, Fixnum, Hash)>] SettingListSchema data, response status code and response headers
    def get_registration_configuration_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.get_registration_configuration ...'
      end
      # verify the required parameter 'registration_id' is set
      if registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_configuration"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/configuration'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeMetadata'] = opts[:'include_metadata'] if !opts[:'include_metadata'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SettingListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get effective configuration settings for a Registration Instance 
    # Returns the effective configuration settings for the registration instance.  If not set at the registration level, the setting will inherit a value from a higher level (e.g. course).  Registrations are the bottom most level in the configuration hierarchy, so the values present at the registration level will be what are used when a course is launched. 
    # @param registration_id 
    # @param instance_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_metadata  (default to false)
    # @return [SettingListSchema]
    def get_registration_instance_configuration(registration_id, instance_id, opts = {})
      data, _status_code, _headers = get_registration_instance_configuration_with_http_info(registration_id, instance_id, opts)
      data
    end

    # Get effective configuration settings for a Registration Instance 
    # Returns the effective configuration settings for the registration instance.  If not set at the registration level, the setting will inherit a value from a higher level (e.g. course).  Registrations are the bottom most level in the configuration hierarchy, so the values present at the registration level will be what are used when a course is launched. 
    # @param registration_id 
    # @param instance_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_metadata 
    # @return [Array<(SettingListSchema, Fixnum, Hash)>] SettingListSchema data, response status code and response headers
    def get_registration_instance_configuration_with_http_info(registration_id, instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.get_registration_instance_configuration ...'
      end
      # verify the required parameter 'registration_id' is set
      if registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_instance_configuration"
      end
      # verify the required parameter 'instance_id' is set
      if instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling RegistrationApi.get_registration_instance_configuration"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/instances/{instanceId}/configuration'.sub('{' + 'registrationId' + '}', registration_id.to_s).sub('{' + 'instanceId' + '}', instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeMetadata'] = opts[:'include_metadata'] if !opts[:'include_metadata'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SettingListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_instance_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get launch history for a Registration Instance 
    # Returns the launch history of the registration instance.  This includes completion status, time taken, and pass/fail status. 
    # @param registration_id 
    # @param instance_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_history_log Whether to include the history log in the launch history (default to false)
    # @return [LaunchHistoryListSchema]
    def get_registration_instance_launch_history(registration_id, instance_id, opts = {})
      data, _status_code, _headers = get_registration_instance_launch_history_with_http_info(registration_id, instance_id, opts)
      data
    end

    # Get launch history for a Registration Instance 
    # Returns the launch history of the registration instance.  This includes completion status, time taken, and pass/fail status. 
    # @param registration_id 
    # @param instance_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_history_log Whether to include the history log in the launch history
    # @return [Array<(LaunchHistoryListSchema, Fixnum, Hash)>] LaunchHistoryListSchema data, response status code and response headers
    def get_registration_instance_launch_history_with_http_info(registration_id, instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.get_registration_instance_launch_history ...'
      end
      # verify the required parameter 'registration_id' is set
      if registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_instance_launch_history"
      end
      # verify the required parameter 'instance_id' is set
      if instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling RegistrationApi.get_registration_instance_launch_history"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/instances/{instanceId}/launchHistory'.sub('{' + 'registrationId' + '}', registration_id.to_s).sub('{' + 'instanceId' + '}', instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeHistoryLog'] = opts[:'include_history_log'] if !opts[:'include_history_log'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LaunchHistoryListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_instance_launch_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get detailed information about a Registration Instance 
    # Returns detailed information about the registration instance.  This includes completion status, time taken, score, and pass/fail status. 
    # @param registration_id 
    # @param instance_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_child_results Include information about each learning object, not just the top level in the results (default to false)
    # @option opts [BOOLEAN] :include_interactions_and_objectives Include interactions and objectives in the results (default to false)
    # @option opts [BOOLEAN] :include_runtime Include runtime details in the results (default to false)
    # @return [RegistrationSchema]
    def get_registration_instance_progress(registration_id, instance_id, opts = {})
      data, _status_code, _headers = get_registration_instance_progress_with_http_info(registration_id, instance_id, opts)
      data
    end

    # Get detailed information about a Registration Instance 
    # Returns detailed information about the registration instance.  This includes completion status, time taken, score, and pass/fail status. 
    # @param registration_id 
    # @param instance_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_child_results Include information about each learning object, not just the top level in the results
    # @option opts [BOOLEAN] :include_interactions_and_objectives Include interactions and objectives in the results
    # @option opts [BOOLEAN] :include_runtime Include runtime details in the results
    # @return [Array<(RegistrationSchema, Fixnum, Hash)>] RegistrationSchema data, response status code and response headers
    def get_registration_instance_progress_with_http_info(registration_id, instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.get_registration_instance_progress ...'
      end
      # verify the required parameter 'registration_id' is set
      if registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_instance_progress"
      end
      # verify the required parameter 'instance_id' is set
      if instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling RegistrationApi.get_registration_instance_progress"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/instances/{instanceId}'.sub('{' + 'registrationId' + '}', registration_id.to_s).sub('{' + 'instanceId' + '}', instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeChildResults'] = opts[:'include_child_results'] if !opts[:'include_child_results'].nil?
      query_params[:'includeInteractionsAndObjectives'] = opts[:'include_interactions_and_objectives'] if !opts[:'include_interactions_and_objectives'].nil?
      query_params[:'includeRuntime'] = opts[:'include_runtime'] if !opts[:'include_runtime'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegistrationSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_instance_progress\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get xAPI statements for a Registration Instance 
    # Returns xAPI statements for the registration instance. 
    # @param registration_id 
    # @param instance_id 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :more Pagination token returned as &#x60;more&#x60; property of multi page list requests
    # @return [XapiStatementResult]
    def get_registration_instance_statements(registration_id, instance_id, opts = {})
      data, _status_code, _headers = get_registration_instance_statements_with_http_info(registration_id, instance_id, opts)
      data
    end

    # Get xAPI statements for a Registration Instance 
    # Returns xAPI statements for the registration instance. 
    # @param registration_id 
    # @param instance_id 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :more Pagination token returned as &#x60;more&#x60; property of multi page list requests
    # @return [Array<(XapiStatementResult, Fixnum, Hash)>] XapiStatementResult data, response status code and response headers
    def get_registration_instance_statements_with_http_info(registration_id, instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.get_registration_instance_statements ...'
      end
      # verify the required parameter 'registration_id' is set
      if registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_instance_statements"
      end
      # verify the required parameter 'instance_id' is set
      if instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling RegistrationApi.get_registration_instance_statements"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/instances/{instanceId}/xAPIStatements'.sub('{' + 'registrationId' + '}', registration_id.to_s).sub('{' + 'instanceId' + '}', instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'XapiStatementResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_instance_statements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of a Registration's Instances 
    # Returns information about all instances of the registration.  This can be useful to see information such as registration progress across versions of a course. 
    # @param registration_id 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :more Pagination token returned as &#x60;more&#x60; property of multi page list requests
    # @option opts [BOOLEAN] :include_child_results Include information about each learning object, not just the top level in the results (default to false)
    # @option opts [BOOLEAN] :include_interactions_and_objectives Include interactions and objectives in the results (default to false)
    # @option opts [BOOLEAN] :include_runtime Include runtime details in the results (default to false)
    # @return [RegistrationListSchema]
    def get_registration_instances(registration_id, opts = {})
      data, _status_code, _headers = get_registration_instances_with_http_info(registration_id, opts)
      data
    end

    # Get a list of a Registration&#39;s Instances 
    # Returns information about all instances of the registration.  This can be useful to see information such as registration progress across versions of a course. 
    # @param registration_id 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :more Pagination token returned as &#x60;more&#x60; property of multi page list requests
    # @option opts [BOOLEAN] :include_child_results Include information about each learning object, not just the top level in the results
    # @option opts [BOOLEAN] :include_interactions_and_objectives Include interactions and objectives in the results
    # @option opts [BOOLEAN] :include_runtime Include runtime details in the results
    # @return [Array<(RegistrationListSchema, Fixnum, Hash)>] RegistrationListSchema data, response status code and response headers
    def get_registration_instances_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.get_registration_instances ...'
      end
      # verify the required parameter 'registration_id' is set
      if registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_instances"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/instances'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?
      query_params[:'includeChildResults'] = opts[:'include_child_results'] if !opts[:'include_child_results'].nil?
      query_params[:'includeInteractionsAndObjectives'] = opts[:'include_interactions_and_objectives'] if !opts[:'include_interactions_and_objectives'].nil?
      query_params[:'includeRuntime'] = opts[:'include_runtime'] if !opts[:'include_runtime'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegistrationListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get launch history for a Registration 
    # Returns the launch history of the registration.  This includes completion status, time taken, and pass/fail status. 
    # @param registration_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_history_log Whether to include the history log in the launch history (default to false)
    # @return [LaunchHistoryListSchema]
    def get_registration_launch_history(registration_id, opts = {})
      data, _status_code, _headers = get_registration_launch_history_with_http_info(registration_id, opts)
      data
    end

    # Get launch history for a Registration 
    # Returns the launch history of the registration.  This includes completion status, time taken, and pass/fail status. 
    # @param registration_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_history_log Whether to include the history log in the launch history
    # @return [Array<(LaunchHistoryListSchema, Fixnum, Hash)>] LaunchHistoryListSchema data, response status code and response headers
    def get_registration_launch_history_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.get_registration_launch_history ...'
      end
      # verify the required parameter 'registration_id' is set
      if registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_launch_history"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/launchHistory'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeHistoryLog'] = opts[:'include_history_log'] if !opts[:'include_history_log'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LaunchHistoryListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_launch_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get detailed information about a Registration 
    # Returns detailed information about the registration.  This includes completion status, time taken, score, and pass/fail status.  >**Info:** >If you find yourself making multiple calls to this endpoint, it may be worthwhile to utilize our [postback mechanism](https://cloud.scorm.com/docs/v2/guides/postback/) instead.  The main premise is that you would set up an endpoint on your end, and when we detect a change to the registration progress: completion status, time taken, score, or pass/fail status, we would send a message to your system with the registration progress. 
    # @param registration_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_child_results Include information about each learning object, not just the top level in the results (default to false)
    # @option opts [BOOLEAN] :include_interactions_and_objectives Include interactions and objectives in the results (default to false)
    # @option opts [BOOLEAN] :include_runtime Include runtime details in the results (default to false)
    # @return [RegistrationSchema]
    def get_registration_progress(registration_id, opts = {})
      data, _status_code, _headers = get_registration_progress_with_http_info(registration_id, opts)
      data
    end

    # Get detailed information about a Registration 
    # Returns detailed information about the registration.  This includes completion status, time taken, score, and pass/fail status.  &gt;**Info:** &gt;If you find yourself making multiple calls to this endpoint, it may be worthwhile to utilize our [postback mechanism](https://cloud.scorm.com/docs/v2/guides/postback/) instead.  The main premise is that you would set up an endpoint on your end, and when we detect a change to the registration progress: completion status, time taken, score, or pass/fail status, we would send a message to your system with the registration progress. 
    # @param registration_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_child_results Include information about each learning object, not just the top level in the results
    # @option opts [BOOLEAN] :include_interactions_and_objectives Include interactions and objectives in the results
    # @option opts [BOOLEAN] :include_runtime Include runtime details in the results
    # @return [Array<(RegistrationSchema, Fixnum, Hash)>] RegistrationSchema data, response status code and response headers
    def get_registration_progress_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.get_registration_progress ...'
      end
      # verify the required parameter 'registration_id' is set
      if registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_progress"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeChildResults'] = opts[:'include_child_results'] if !opts[:'include_child_results'].nil?
      query_params[:'includeInteractionsAndObjectives'] = opts[:'include_interactions_and_objectives'] if !opts[:'include_interactions_and_objectives'].nil?
      query_params[:'includeRuntime'] = opts[:'include_runtime'] if !opts[:'include_runtime'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegistrationSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_progress\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get xAPI statements for a Registration 
    # Returns xAPI statements for the registration. 
    # @param registration_id 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :more Pagination token returned as &#x60;more&#x60; property of multi page list requests
    # @return [XapiStatementResult]
    def get_registration_statements(registration_id, opts = {})
      data, _status_code, _headers = get_registration_statements_with_http_info(registration_id, opts)
      data
    end

    # Get xAPI statements for a Registration 
    # Returns xAPI statements for the registration. 
    # @param registration_id 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :more Pagination token returned as &#x60;more&#x60; property of multi page list requests
    # @return [Array<(XapiStatementResult, Fixnum, Hash)>] XapiStatementResult data, response status code and response headers
    def get_registration_statements_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.get_registration_statements ...'
      end
      # verify the required parameter 'registration_id' is set
      if registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_statements"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/xAPIStatements'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'XapiStatementResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_statements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get tags for a Registration 
    # Returns the tags for the registration. 
    # @param registration_id 
    # @param [Hash] opts the optional parameters
    # @return [TagListSchema]
    def get_registration_tags(registration_id, opts = {})
      data, _status_code, _headers = get_registration_tags_with_http_info(registration_id, opts)
      data
    end

    # Get tags for a Registration 
    # Returns the tags for the registration. 
    # @param registration_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TagListSchema, Fixnum, Hash)>] TagListSchema data, response status code and response headers
    def get_registration_tags_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.get_registration_tags ...'
      end
      # verify the required parameter 'registration_id' is set
      if registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_tags"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/tags'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TagListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of Registrations 
    # Returns a list of registrations.  Can be filtered using the request parameters to provide a subset of results.  >**Note:** >This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a `more` token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request.  >**Info:** >If you find yourself making multiple calls to this endpoint, it may be worthwhile to utilize our [postback mechanism](https://cloud.scorm.com/docs/v2/guides/postback/) instead.  The main premise is that you would set up an endpoint on your end, and when we detect a change to the registration progress: completion status, time taken, score, or pass/fail status, we would send a message to your system with the registration progress. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only retrieve resources having &#x60;courseId&#x60;
    # @option opts [String] :learner_id Only retrieve resources having &#x60;learnerId&#x60;
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :datetime_filter Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (default to created)
    # @option opts [Array<String>] :tags Filter items matching any tag provided (not all)
    # @option opts [String] :filter Optional string which filters results by a specified field (described by filterBy).
    # @option opts [String] :filter_by Optional enum parameter for specifying the field on which to run the filter.  (default to registration_id)
    # @option opts [String] :order_by Optional enum parameter for specifying the field and order by which to sort the results.  (default to created_desc)
    # @option opts [String] :more Pagination token returned as &#x60;more&#x60; property of multi page list requests
    # @option opts [BOOLEAN] :include_child_results Include information about each learning object, not just the top level in the results (default to false)
    # @option opts [BOOLEAN] :include_interactions_and_objectives Include interactions and objectives in the results (default to false)
    # @option opts [BOOLEAN] :include_runtime Include runtime details in the results (default to false)
    # @return [RegistrationListSchema]
    def get_registrations(opts = {})
      data, _status_code, _headers = get_registrations_with_http_info(opts)
      data
    end

    # Get a list of Registrations 
    # Returns a list of registrations.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request.  &gt;**Info:** &gt;If you find yourself making multiple calls to this endpoint, it may be worthwhile to utilize our [postback mechanism](https://cloud.scorm.com/docs/v2/guides/postback/) instead.  The main premise is that you would set up an endpoint on your end, and when we detect a change to the registration progress: completion status, time taken, score, or pass/fail status, we would send a message to your system with the registration progress. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only retrieve resources having &#x60;courseId&#x60;
    # @option opts [String] :learner_id Only retrieve resources having &#x60;learnerId&#x60;
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :datetime_filter Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against
    # @option opts [Array<String>] :tags Filter items matching any tag provided (not all)
    # @option opts [String] :filter Optional string which filters results by a specified field (described by filterBy).
    # @option opts [String] :filter_by Optional enum parameter for specifying the field on which to run the filter. 
    # @option opts [String] :order_by Optional enum parameter for specifying the field and order by which to sort the results. 
    # @option opts [String] :more Pagination token returned as &#x60;more&#x60; property of multi page list requests
    # @option opts [BOOLEAN] :include_child_results Include information about each learning object, not just the top level in the results
    # @option opts [BOOLEAN] :include_interactions_and_objectives Include interactions and objectives in the results
    # @option opts [BOOLEAN] :include_runtime Include runtime details in the results
    # @return [Array<(RegistrationListSchema, Fixnum, Hash)>] RegistrationListSchema data, response status code and response headers
    def get_registrations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.get_registrations ...'
      end
      # resource path
      local_var_path = '/registrations'

      # query parameters
      query_params = {}
      query_params[:'courseId'] = opts[:'course_id'] if !opts[:'course_id'].nil?
      query_params[:'learnerId'] = opts[:'learner_id'] if !opts[:'learner_id'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'datetimeFilter'] = opts[:'datetime_filter'] if !opts[:'datetime_filter'].nil?
      query_params[:'tags'] = @api_client.build_collection_param(opts[:'tags'], :csv) if !opts[:'tags'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'filterBy'] = opts[:'filter_by'] if !opts[:'filter_by'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?
      query_params[:'includeChildResults'] = opts[:'include_child_results'] if !opts[:'include_child_results'].nil?
      query_params[:'includeInteractionsAndObjectives'] = opts[:'include_interactions_and_objectives'] if !opts[:'include_interactions_and_objectives'].nil?
      query_params[:'includeRuntime'] = opts[:'include_runtime'] if !opts[:'include_runtime'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegistrationListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registrations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add tags to a Registration 
    # Applies the provided tags to the registration.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetRegistrations). 
    # @param registration_id 
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_registration_tags(registration_id, tags, opts = {})
      put_registration_tags_with_http_info(registration_id, tags, opts)
      nil
    end

    # Add tags to a Registration 
    # Applies the provided tags to the registration.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetRegistrations). 
    # @param registration_id 
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_registration_tags_with_http_info(registration_id, tags, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.put_registration_tags ...'
      end
      # verify the required parameter 'registration_id' is set
      if registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.put_registration_tags"
      end
      # verify the required parameter 'tags' is set
      if tags.nil?
        fail ArgumentError, "Missing the required parameter 'tags' when calling RegistrationApi.put_registration_tags"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/tags'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tags)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#put_registration_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add a group of tags to a group of Registrations 
    # Applies all of the provided tags on all of the provided registrations.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetRegistrations). 
    # @param batch Array of ids, and array of tags for bulk tag operations
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_registration_tags_batch(batch, opts = {})
      put_registration_tags_batch_with_http_info(batch, opts)
      nil
    end

    # Add a group of tags to a group of Registrations 
    # Applies all of the provided tags on all of the provided registrations.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetRegistrations). 
    # @param batch Array of ids, and array of tags for bulk tag operations
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_registration_tags_batch_with_http_info(batch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.put_registration_tags_batch ...'
      end
      # verify the required parameter 'batch' is set
      if batch.nil?
        fail ArgumentError, "Missing the required parameter 'batch' when calling RegistrationApi.put_registration_tags_batch"
      end
      # resource path
      local_var_path = '/registrations/tags'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(batch)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#put_registration_tags_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update configuration settings for a Registration 
    # Updates configuration settings at the registration level.  This will explicitly set a value at the registration level and override any settings from a higher level.  Registrations are the bottom most level in the configuration hierarchy, so the values present at the registration level will be what are used when a course is launched. 
    # @param registration_id 
    # @param configuration_settings 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_registration_configuration(registration_id, configuration_settings, opts = {})
      set_registration_configuration_with_http_info(registration_id, configuration_settings, opts)
      nil
    end

    # Update configuration settings for a Registration 
    # Updates configuration settings at the registration level.  This will explicitly set a value at the registration level and override any settings from a higher level.  Registrations are the bottom most level in the configuration hierarchy, so the values present at the registration level will be what are used when a course is launched. 
    # @param registration_id 
    # @param configuration_settings 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_registration_configuration_with_http_info(registration_id, configuration_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.set_registration_configuration ...'
      end
      # verify the required parameter 'registration_id' is set
      if registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.set_registration_configuration"
      end
      # verify the required parameter 'configuration_settings' is set
      if configuration_settings.nil?
        fail ArgumentError, "Missing the required parameter 'configuration_settings' when calling RegistrationApi.set_registration_configuration"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/configuration'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(configuration_settings)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#set_registration_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update configuration settings for a Registration Instance 
    # Updates configuration settings at the registration level.  This will explicitly set a value at the registration level and override any settings from a higher level.  Registrations are the bottom most level in the configuration hierarchy, so the values present at the registration level will be what are used when a course is launched. 
    # @param registration_id 
    # @param instance_id 
    # @param configuration_settings 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_registration_instance_configuration(registration_id, instance_id, configuration_settings, opts = {})
      set_registration_instance_configuration_with_http_info(registration_id, instance_id, configuration_settings, opts)
      nil
    end

    # Update configuration settings for a Registration Instance 
    # Updates configuration settings at the registration level.  This will explicitly set a value at the registration level and override any settings from a higher level.  Registrations are the bottom most level in the configuration hierarchy, so the values present at the registration level will be what are used when a course is launched. 
    # @param registration_id 
    # @param instance_id 
    # @param configuration_settings 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_registration_instance_configuration_with_http_info(registration_id, instance_id, configuration_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.set_registration_instance_configuration ...'
      end
      # verify the required parameter 'registration_id' is set
      if registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.set_registration_instance_configuration"
      end
      # verify the required parameter 'instance_id' is set
      if instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling RegistrationApi.set_registration_instance_configuration"
      end
      # verify the required parameter 'configuration_settings' is set
      if configuration_settings.nil?
        fail ArgumentError, "Missing the required parameter 'configuration_settings' when calling RegistrationApi.set_registration_instance_configuration"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/instances/{instanceId}/configuration'.sub('{' + 'registrationId' + '}', registration_id.to_s).sub('{' + 'instanceId' + '}', instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(configuration_settings)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#set_registration_instance_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Send a test postback with the provided configuration 
    # Sends a postback with dummy data to the url specified.  The postback will use additional information from the configuration provided with the request (e.g. a provided username/password will be sent along with the postback to allow for logging in to a secure page.  The format of the data sent will differ depending on whether `httpbasic` or `form` is passed for `authType`.  - With httpbasic, an authorization header will be sent with the base64 encoded credentials.  The body will be JSON formatted data. - With form, the username and password will be sent in the body of the request along with the data.  The whole body will be url encoded.  >**Note:** >The data that will be sent to the provided url is the same format as the output of the GetRegistrationProgress endpoint. 
    # @param post_back 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def test_registration_postback(post_back, opts = {})
      test_registration_postback_with_http_info(post_back, opts)
      nil
    end

    # Send a test postback with the provided configuration 
    # Sends a postback with dummy data to the url specified.  The postback will use additional information from the configuration provided with the request (e.g. a provided username/password will be sent along with the postback to allow for logging in to a secure page.  The format of the data sent will differ depending on whether &#x60;httpbasic&#x60; or &#x60;form&#x60; is passed for &#x60;authType&#x60;.  - With httpbasic, an authorization header will be sent with the base64 encoded credentials.  The body will be JSON formatted data. - With form, the username and password will be sent in the body of the request along with the data.  The whole body will be url encoded.  &gt;**Note:** &gt;The data that will be sent to the provided url is the same format as the output of the GetRegistrationProgress endpoint. 
    # @param post_back 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def test_registration_postback_with_http_info(post_back, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.test_registration_postback ...'
      end
      # verify the required parameter 'post_back' is set
      if post_back.nil?
        fail ArgumentError, "Missing the required parameter 'post_back' when calling RegistrationApi.test_registration_postback"
      end
      # resource path
      local_var_path = '/registrations/postBackTest'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(post_back)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#test_registration_postback\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
