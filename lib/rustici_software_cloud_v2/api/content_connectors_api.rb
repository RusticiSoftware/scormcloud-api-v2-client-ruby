=begin
#SCORM Cloud Rest API

#REST API used for SCORM Cloud integrations.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'uri'

module RusticiSoftwareCloudV2
  class ContentConnectorsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    extend Gem::Deprecate

    # A call to this method will create a new content connector and return a newly created Id for it. 
    # @param connector 
    # @param [Hash] opts the optional parameters
    # @return [StringResultSchema]
    def create_connector(connector, opts = {})
      data, _status_code, _headers = create_connector_with_http_info(connector, opts)
      data
    end

    # A call to this method will create a new content connector and return a newly created Id for it. 
    # @param connector 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringResultSchema, Fixnum, Hash)>] StringResultSchema data, response status code and response headers
    def create_connector_with_http_info(connector, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentConnectorsApi.create_connector ...'
      end
      # verify the required parameter 'connector' is set
      if connector.nil?
        fail ArgumentError, "Missing the required parameter 'connector' when calling ContentConnectorsApi.create_connector"
      end
      # resource path
      local_var_path = '/contentConnectors'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(connector)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StringResultSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentConnectorsApi#create_connector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a connector 
    # Delete the specified connector. 
    # @param connector_id the connector id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_connector(connector_id, opts = {})
      delete_connector_with_http_info(connector_id, opts)
      nil
    end

    # Delete a connector 
    # Delete the specified connector. 
    # @param connector_id the connector id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_connector_with_http_info(connector_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentConnectorsApi.delete_connector ...'
      end
      # verify the required parameter 'connector_id' is set
      if connector_id.nil?
        fail ArgumentError, "Missing the required parameter 'connector_id' when calling ContentConnectorsApi.delete_connector"
      end
      # resource path
      local_var_path = '/contentConnectors/{connectorId}'.sub('{' + 'connectorId' + '}', connector_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentConnectorsApi#delete_connector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of all Content Connectors for the application 
    # Get list of all Content Connectors in this application. 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_additional_instance_information 
    # @return [ConnectorListSchema]
    def get_connectors_list(opts = {})
      data, _status_code, _headers = get_connectors_list_with_http_info(opts)
      data
    end

    # Get a list of all Content Connectors for the application 
    # Get list of all Content Connectors in this application. 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_additional_instance_information 
    # @return [Array<(ConnectorListSchema, Fixnum, Hash)>] ConnectorListSchema data, response status code and response headers
    def get_connectors_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentConnectorsApi.get_connectors_list ...'
      end
      # resource path
      local_var_path = '/contentConnectors'

      # query parameters
      query_params = {}
      query_params[:'includeAdditionalInstanceInformation'] = opts[:'include_additional_instance_information'] if !opts[:'include_additional_instance_information'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConnectorListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentConnectorsApi#get_connectors_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the configuration or enabled flag associated with `connectorId`. 
    # @param connector_id the connector id
    # @param connector 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_connector(connector_id, connector, opts = {})
      update_connector_with_http_info(connector_id, connector, opts)
      nil
    end

    # Update the configuration or enabled flag associated with &#x60;connectorId&#x60;. 
    # @param connector_id the connector id
    # @param connector 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_connector_with_http_info(connector_id, connector, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentConnectorsApi.update_connector ...'
      end
      # verify the required parameter 'connector_id' is set
      if connector_id.nil?
        fail ArgumentError, "Missing the required parameter 'connector_id' when calling ContentConnectorsApi.update_connector"
      end
      # verify the required parameter 'connector' is set
      if connector.nil?
        fail ArgumentError, "Missing the required parameter 'connector' when calling ContentConnectorsApi.update_connector"
      end
      # resource path
      local_var_path = '/contentConnectors/{connectorId}'.sub('{' + 'connectorId' + '}', connector_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(connector)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentConnectorsApi#update_connector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
