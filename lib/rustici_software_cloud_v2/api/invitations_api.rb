=begin
#SCORM Cloud Rest API

#REST API used for SCORM Cloud integrations.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.27

=end

require 'uri'

module RusticiSoftwareCloudV2
  class InvitationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a Private Invitation to a Course 
    # Creates a private invitation job which sends emails with a link to the course.  Invitations are meant as a way to provide access to your content.  Registrations will be created from the provided email addresses.  The email job will asynchronously send emails to those addresses inviting them to the course.  When the learners visit the link in the email, the course will be launched with the already created registration.  The private invitation ID can be used with GetPrivateInvitationJobStatus to view the status of the email job.  >**Info:** >While invitations are a way to provide access to your content, the majority of use cases would be better suited by creating a registration and building a launch link with the registration endpoints instead.  Invitations build upon registrations by grouping a set of registrations together and adding access control measures to said group. Invitations could be used to pass yearly compliance training to an entire company.  Invitations also have an associated expiration date which determines when the course will no longer be launchable. 
    # @param private_invitation_request 
    # @param [Hash] opts the optional parameters
    # @return [InvitationSummarySchema]
    def create_private_invitation(private_invitation_request, opts = {})
      data, _status_code, _headers = create_private_invitation_with_http_info(private_invitation_request, opts)
      data
    end

    # Create a Private Invitation to a Course 
    # Creates a private invitation job which sends emails with a link to the course.  Invitations are meant as a way to provide access to your content.  Registrations will be created from the provided email addresses.  The email job will asynchronously send emails to those addresses inviting them to the course.  When the learners visit the link in the email, the course will be launched with the already created registration.  The private invitation ID can be used with GetPrivateInvitationJobStatus to view the status of the email job.  &gt;**Info:** &gt;While invitations are a way to provide access to your content, the majority of use cases would be better suited by creating a registration and building a launch link with the registration endpoints instead.  Invitations build upon registrations by grouping a set of registrations together and adding access control measures to said group. Invitations could be used to pass yearly compliance training to an entire company.  Invitations also have an associated expiration date which determines when the course will no longer be launchable. 
    # @param private_invitation_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InvitationSummarySchema, Fixnum, Hash)>] InvitationSummarySchema data, response status code and response headers
    def create_private_invitation_with_http_info(private_invitation_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.create_private_invitation ...'
      end
      # verify the required parameter 'private_invitation_request' is set
      if private_invitation_request.nil?
        fail ArgumentError, "Missing the required parameter 'private_invitation_request' when calling InvitationsApi.create_private_invitation"
      end
      # resource path
      local_var_path = '/invitations/private'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(private_invitation_request)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvitationSummarySchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#create_private_invitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Public Invitation to a Course 
    # Creates an invitation link to the course which can then be publicly distributed.  Invitations are meant as a way to provide access to your content.  When a learner visits the link, they will be prompted for name and email, a registration will be created from the information provided, and they will be redirected to the course.  Since anyone visiting the link will create a registration, it is highly advised that you set the `registrationCap` parameter when calling this method.  >**Info:** >While invitations are a way to provide access to your content, the majority of use cases would be better suited by creating a registration and building a launch link with the registration endpoints instead.  Invitations build upon registrations by grouping a set of registrations together and adding access control measures to said group. Invitations could be used to pass yearly compliance training to an entire company.  Invitations also have an associated expiration date which determines when the course will no longer be launchable. 
    # @param public_invitation_request A description of the public invitation to be created.
    # @param [Hash] opts the optional parameters
    # @return [PublicInvitationSchema]
    def create_public_invitation(public_invitation_request, opts = {})
      data, _status_code, _headers = create_public_invitation_with_http_info(public_invitation_request, opts)
      data
    end

    # Create a Public Invitation to a Course 
    # Creates an invitation link to the course which can then be publicly distributed.  Invitations are meant as a way to provide access to your content.  When a learner visits the link, they will be prompted for name and email, a registration will be created from the information provided, and they will be redirected to the course.  Since anyone visiting the link will create a registration, it is highly advised that you set the &#x60;registrationCap&#x60; parameter when calling this method.  &gt;**Info:** &gt;While invitations are a way to provide access to your content, the majority of use cases would be better suited by creating a registration and building a launch link with the registration endpoints instead.  Invitations build upon registrations by grouping a set of registrations together and adding access control measures to said group. Invitations could be used to pass yearly compliance training to an entire company.  Invitations also have an associated expiration date which determines when the course will no longer be launchable. 
    # @param public_invitation_request A description of the public invitation to be created.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PublicInvitationSchema, Fixnum, Hash)>] PublicInvitationSchema data, response status code and response headers
    def create_public_invitation_with_http_info(public_invitation_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.create_public_invitation ...'
      end
      # verify the required parameter 'public_invitation_request' is set
      if public_invitation_request.nil?
        fail ArgumentError, "Missing the required parameter 'public_invitation_request' when calling InvitationsApi.create_public_invitation"
      end
      # resource path
      local_var_path = '/invitations/public'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(public_invitation_request)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublicInvitationSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#create_public_invitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete tags from an Invitation 
    # Deletes the specified tags from the invitation.  Deleting tags that do not exist will still result in a success. 
    # @param invitation_id 
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_invitation_tags(invitation_id, tags, opts = {})
      delete_invitation_tags_with_http_info(invitation_id, tags, opts)
      nil
    end

    # Delete tags from an Invitation 
    # Deletes the specified tags from the invitation.  Deleting tags that do not exist will still result in a success. 
    # @param invitation_id 
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_invitation_tags_with_http_info(invitation_id, tags, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.delete_invitation_tags ...'
      end
      # verify the required parameter 'invitation_id' is set
      if invitation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_id' when calling InvitationsApi.delete_invitation_tags"
      end
      # verify the required parameter 'tags' is set
      if tags.nil?
        fail ArgumentError, "Missing the required parameter 'tags' when calling InvitationsApi.delete_invitation_tags"
      end
      # resource path
      local_var_path = '/invitations/{invitationId}/tags'.sub('{' + 'invitationId' + '}', invitation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tags)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#delete_invitation_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of Invitations 
    # Returns a list of invitations (both public and private).  Can be filtered using the request parameters to provide a subset of results.  >**Note:** >This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a `more` token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only retrieve resources having &#x60;courseId&#x60;
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :datetime_filter Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (default to updated)
    # @option opts [Array<String>] :tags Filter items matching any tag provided (not all)
    # @option opts [String] :filter Optional string which filters results by a specified field (described by filterBy).
    # @option opts [String] :filter_by Optional enum parameter for specifying the field on which to run the filter.  (default to invitation_id)
    # @option opts [String] :order_by Optional enum parameter for specifying the field and order by which to sort the results.  (default to updated_asc)
    # @option opts [String] :more Pagination token returned as &#x60;more&#x60; property of multi page list requests
    # @return [InvitationSummaryList]
    def get_all_invitations(opts = {})
      data, _status_code, _headers = get_all_invitations_with_http_info(opts)
      data
    end

    # Get a list of Invitations 
    # Returns a list of invitations (both public and private).  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only retrieve resources having &#x60;courseId&#x60;
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :datetime_filter Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against
    # @option opts [Array<String>] :tags Filter items matching any tag provided (not all)
    # @option opts [String] :filter Optional string which filters results by a specified field (described by filterBy).
    # @option opts [String] :filter_by Optional enum parameter for specifying the field on which to run the filter. 
    # @option opts [String] :order_by Optional enum parameter for specifying the field and order by which to sort the results. 
    # @option opts [String] :more Pagination token returned as &#x60;more&#x60; property of multi page list requests
    # @return [Array<(InvitationSummaryList, Fixnum, Hash)>] InvitationSummaryList data, response status code and response headers
    def get_all_invitations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.get_all_invitations ...'
      end
      # resource path
      local_var_path = '/invitations'

      # query parameters
      query_params = {}
      query_params[:'courseId'] = opts[:'course_id'] if !opts[:'course_id'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'datetimeFilter'] = opts[:'datetime_filter'] if !opts[:'datetime_filter'].nil?
      query_params[:'tags'] = @api_client.build_collection_param(opts[:'tags'], :csv) if !opts[:'tags'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'filterBy'] = opts[:'filter_by'] if !opts[:'filter_by'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvitationSummaryList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#get_all_invitations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get tags for an Invitation 
    # Returns the tags for the invitation. 
    # @param invitation_id 
    # @param [Hash] opts the optional parameters
    # @return [TagListSchema]
    def get_invitation_tags(invitation_id, opts = {})
      data, _status_code, _headers = get_invitation_tags_with_http_info(invitation_id, opts)
      data
    end

    # Get tags for an Invitation 
    # Returns the tags for the invitation. 
    # @param invitation_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TagListSchema, Fixnum, Hash)>] TagListSchema data, response status code and response headers
    def get_invitation_tags_with_http_info(invitation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.get_invitation_tags ...'
      end
      # verify the required parameter 'invitation_id' is set
      if invitation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_id' when calling InvitationsApi.get_invitation_tags"
      end
      # resource path
      local_var_path = '/invitations/{invitationId}/tags'.sub('{' + 'invitationId' + '}', invitation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TagListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#get_invitation_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get detailed information about a Private Invitation 
    # Returns detailed information about the private invitation.  This includes the email sent, course ID, and whether new the invitation can still be launched or not. 
    # @param invitation_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_registration_count Include the registration count in the results (default to false)
    # @return [PrivateInvitationSchema]
    def get_private_invitation(invitation_id, opts = {})
      data, _status_code, _headers = get_private_invitation_with_http_info(invitation_id, opts)
      data
    end

    # Get detailed information about a Private Invitation 
    # Returns detailed information about the private invitation.  This includes the email sent, course ID, and whether new the invitation can still be launched or not. 
    # @param invitation_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_registration_count Include the registration count in the results
    # @return [Array<(PrivateInvitationSchema, Fixnum, Hash)>] PrivateInvitationSchema data, response status code and response headers
    def get_private_invitation_with_http_info(invitation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.get_private_invitation ...'
      end
      # verify the required parameter 'invitation_id' is set
      if invitation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_id' when calling InvitationsApi.get_private_invitation"
      end
      # resource path
      local_var_path = '/invitations/private/{invitationId}'.sub('{' + 'invitationId' + '}', invitation_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeRegistrationCount'] = opts[:'include_registration_count'] if !opts[:'include_registration_count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PrivateInvitationSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#get_private_invitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get email job status for a Private Invitation 
    # Check the status of a private invitation email job.  This can be called incrementally to check the progress of the emails. 
    # @param invitation_id 
    # @param [Hash] opts the optional parameters
    # @return [InvitationJobStatusSchema]
    def get_private_invitation_job_status(invitation_id, opts = {})
      data, _status_code, _headers = get_private_invitation_job_status_with_http_info(invitation_id, opts)
      data
    end

    # Get email job status for a Private Invitation 
    # Check the status of a private invitation email job.  This can be called incrementally to check the progress of the emails. 
    # @param invitation_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InvitationJobStatusSchema, Fixnum, Hash)>] InvitationJobStatusSchema data, response status code and response headers
    def get_private_invitation_job_status_with_http_info(invitation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.get_private_invitation_job_status ...'
      end
      # verify the required parameter 'invitation_id' is set
      if invitation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_id' when calling InvitationsApi.get_private_invitation_job_status"
      end
      # resource path
      local_var_path = '/invitations/private/{invitationId}/jobStatus'.sub('{' + 'invitationId' + '}', invitation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvitationJobStatusSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#get_private_invitation_job_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of Private Invitations 
    # Returns a list of private invitations.  Can be filtered using the request parameters to provide a subset of results.  >**Note:** >This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a `more` token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only retrieve resources having &#x60;courseId&#x60;
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :datetime_filter Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (default to updated)
    # @option opts [Array<String>] :tags Filter items matching any tag provided (not all)
    # @option opts [String] :filter Optional string which filters results by a specified field (described by filterBy).
    # @option opts [String] :filter_by Optional enum parameter for specifying the field on which to run the filter.  (default to invitation_id)
    # @option opts [String] :order_by Optional enum parameter for specifying the field and order by which to sort the results.  (default to updated_asc)
    # @option opts [String] :more Pagination token returned as &#x60;more&#x60; property of multi page list requests
    # @return [PrivateInvitationList]
    def get_private_invitations(opts = {})
      data, _status_code, _headers = get_private_invitations_with_http_info(opts)
      data
    end

    # Get a list of Private Invitations 
    # Returns a list of private invitations.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only retrieve resources having &#x60;courseId&#x60;
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :datetime_filter Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against
    # @option opts [Array<String>] :tags Filter items matching any tag provided (not all)
    # @option opts [String] :filter Optional string which filters results by a specified field (described by filterBy).
    # @option opts [String] :filter_by Optional enum parameter for specifying the field on which to run the filter. 
    # @option opts [String] :order_by Optional enum parameter for specifying the field and order by which to sort the results. 
    # @option opts [String] :more Pagination token returned as &#x60;more&#x60; property of multi page list requests
    # @return [Array<(PrivateInvitationList, Fixnum, Hash)>] PrivateInvitationList data, response status code and response headers
    def get_private_invitations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.get_private_invitations ...'
      end
      # resource path
      local_var_path = '/invitations/private'

      # query parameters
      query_params = {}
      query_params[:'courseId'] = opts[:'course_id'] if !opts[:'course_id'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'datetimeFilter'] = opts[:'datetime_filter'] if !opts[:'datetime_filter'].nil?
      query_params[:'tags'] = @api_client.build_collection_param(opts[:'tags'], :csv) if !opts[:'tags'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'filterBy'] = opts[:'filter_by'] if !opts[:'filter_by'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PrivateInvitationList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#get_private_invitations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of Private User Invitations 
    # Get a list of user who were invited to view the course.  Can be filtered using the request parameters to provide a subset of results.  >**Note:** >This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a `more` token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
    # @param invitation_id 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :datetime_filter Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (default to updated)
    # @option opts [String] :filter Optional string which filters results by a specified field (described by filterBy).
    # @option opts [String] :filter_by Optional enum parameter for specifying the field on which to run the filter.  (default to registration_id)
    # @option opts [String] :order_by Optional enum parameter for specifying the field and order by which to sort the results.  (default to updated_asc)
    # @option opts [String] :more Pagination token returned as &#x60;more&#x60; property of multi page list requests
    # @option opts [BOOLEAN] :include_registration_report Optional flag to include basic registration information
    # @return [UserInvitationList]
    def get_private_user_invitations(invitation_id, opts = {})
      data, _status_code, _headers = get_private_user_invitations_with_http_info(invitation_id, opts)
      data
    end

    # Get a list of Private User Invitations 
    # Get a list of user who were invited to view the course.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
    # @param invitation_id 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :datetime_filter Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against
    # @option opts [String] :filter Optional string which filters results by a specified field (described by filterBy).
    # @option opts [String] :filter_by Optional enum parameter for specifying the field on which to run the filter. 
    # @option opts [String] :order_by Optional enum parameter for specifying the field and order by which to sort the results. 
    # @option opts [String] :more Pagination token returned as &#x60;more&#x60; property of multi page list requests
    # @option opts [BOOLEAN] :include_registration_report Optional flag to include basic registration information
    # @return [Array<(UserInvitationList, Fixnum, Hash)>] UserInvitationList data, response status code and response headers
    def get_private_user_invitations_with_http_info(invitation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.get_private_user_invitations ...'
      end
      # verify the required parameter 'invitation_id' is set
      if invitation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_id' when calling InvitationsApi.get_private_user_invitations"
      end
      # resource path
      local_var_path = '/invitations/private/{invitationId}/userInvitations'.sub('{' + 'invitationId' + '}', invitation_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'datetimeFilter'] = opts[:'datetime_filter'] if !opts[:'datetime_filter'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'filterBy'] = opts[:'filter_by'] if !opts[:'filter_by'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?
      query_params[:'includeRegistrationReport'] = opts[:'include_registration_report'] if !opts[:'include_registration_report'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserInvitationList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#get_private_user_invitations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get detailed information about a Public Invitation 
    # Returns detailed information about the public invitation.  This includes url, registration cap, and whether new learners can accept the invitation or not. 
    # @param invitation_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_registration_count Include the registration count in the results (default to false)
    # @return [PublicInvitationSchema]
    def get_public_invitation(invitation_id, opts = {})
      data, _status_code, _headers = get_public_invitation_with_http_info(invitation_id, opts)
      data
    end

    # Get detailed information about a Public Invitation 
    # Returns detailed information about the public invitation.  This includes url, registration cap, and whether new learners can accept the invitation or not. 
    # @param invitation_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_registration_count Include the registration count in the results
    # @return [Array<(PublicInvitationSchema, Fixnum, Hash)>] PublicInvitationSchema data, response status code and response headers
    def get_public_invitation_with_http_info(invitation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.get_public_invitation ...'
      end
      # verify the required parameter 'invitation_id' is set
      if invitation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_id' when calling InvitationsApi.get_public_invitation"
      end
      # resource path
      local_var_path = '/invitations/public/{invitationId}'.sub('{' + 'invitationId' + '}', invitation_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeRegistrationCount'] = opts[:'include_registration_count'] if !opts[:'include_registration_count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublicInvitationSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#get_public_invitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of Public Invitations 
    # Returns a list of public invitations.  Can be filtered using the request parameters to provide a subset of results.  >**Note:** >This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a `more` token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only retrieve resources having &#x60;courseId&#x60;
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :datetime_filter Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (default to updated)
    # @option opts [Array<String>] :tags Filter items matching any tag provided (not all)
    # @option opts [String] :filter Optional string which filters results by a specified field (described by filterBy).
    # @option opts [String] :filter_by Optional enum parameter for specifying the field on which to run the filter.  (default to invitation_id)
    # @option opts [String] :order_by Optional enum parameter for specifying the field and order by which to sort the results.  (default to updated_asc)
    # @option opts [String] :more Pagination token returned as &#x60;more&#x60; property of multi page list requests
    # @return [PublicInvitationList]
    def get_public_invitations(opts = {})
      data, _status_code, _headers = get_public_invitations_with_http_info(opts)
      data
    end

    # Get a list of Public Invitations 
    # Returns a list of public invitations.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only retrieve resources having &#x60;courseId&#x60;
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :datetime_filter Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against
    # @option opts [Array<String>] :tags Filter items matching any tag provided (not all)
    # @option opts [String] :filter Optional string which filters results by a specified field (described by filterBy).
    # @option opts [String] :filter_by Optional enum parameter for specifying the field on which to run the filter. 
    # @option opts [String] :order_by Optional enum parameter for specifying the field and order by which to sort the results. 
    # @option opts [String] :more Pagination token returned as &#x60;more&#x60; property of multi page list requests
    # @return [Array<(PublicInvitationList, Fixnum, Hash)>] PublicInvitationList data, response status code and response headers
    def get_public_invitations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.get_public_invitations ...'
      end
      # resource path
      local_var_path = '/invitations/public'

      # query parameters
      query_params = {}
      query_params[:'courseId'] = opts[:'course_id'] if !opts[:'course_id'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'datetimeFilter'] = opts[:'datetime_filter'] if !opts[:'datetime_filter'].nil?
      query_params[:'tags'] = @api_client.build_collection_param(opts[:'tags'], :csv) if !opts[:'tags'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'filterBy'] = opts[:'filter_by'] if !opts[:'filter_by'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublicInvitationList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#get_public_invitations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of Public User Invitations 
    # Returns a list of users who have visited the public invitation link.  Can be filtered using the request parameters to provide a subset of results.  >**Note:** >This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a `more` token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
    # @param invitation_id 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :datetime_filter Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (default to updated)
    # @option opts [String] :filter Optional string which filters results by a specified field (described by filterBy).
    # @option opts [String] :filter_by Optional enum parameter for specifying the field on which to run the filter.  (default to registration_id)
    # @option opts [String] :order_by Optional enum parameter for specifying the field and order by which to sort the results.  (default to updated_asc)
    # @option opts [String] :more Pagination token returned as &#x60;more&#x60; property of multi page list requests
    # @option opts [BOOLEAN] :include_registration_report Optional flag to include basic registration information
    # @return [UserInvitationList]
    def get_public_user_invitations(invitation_id, opts = {})
      data, _status_code, _headers = get_public_user_invitations_with_http_info(invitation_id, opts)
      data
    end

    # Get a list of Public User Invitations 
    # Returns a list of users who have visited the public invitation link.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
    # @param invitation_id 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :since Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [DateTime] :_until Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
    # @option opts [String] :datetime_filter Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against
    # @option opts [String] :filter Optional string which filters results by a specified field (described by filterBy).
    # @option opts [String] :filter_by Optional enum parameter for specifying the field on which to run the filter. 
    # @option opts [String] :order_by Optional enum parameter for specifying the field and order by which to sort the results. 
    # @option opts [String] :more Pagination token returned as &#x60;more&#x60; property of multi page list requests
    # @option opts [BOOLEAN] :include_registration_report Optional flag to include basic registration information
    # @return [Array<(UserInvitationList, Fixnum, Hash)>] UserInvitationList data, response status code and response headers
    def get_public_user_invitations_with_http_info(invitation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.get_public_user_invitations ...'
      end
      # verify the required parameter 'invitation_id' is set
      if invitation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_id' when calling InvitationsApi.get_public_user_invitations"
      end
      # resource path
      local_var_path = '/invitations/public/{invitationId}/userInvitations'.sub('{' + 'invitationId' + '}', invitation_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'datetimeFilter'] = opts[:'datetime_filter'] if !opts[:'datetime_filter'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'filterBy'] = opts[:'filter_by'] if !opts[:'filter_by'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?
      query_params[:'includeRegistrationReport'] = opts[:'include_registration_report'] if !opts[:'include_registration_report'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserInvitationList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#get_public_user_invitations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add tags to an Invitation 
    # Applies the provided tags to the invitation.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetInvitations). 
    # @param invitation_id 
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_invitation_tags(invitation_id, tags, opts = {})
      put_invitation_tags_with_http_info(invitation_id, tags, opts)
      nil
    end

    # Add tags to an Invitation 
    # Applies the provided tags to the invitation.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetInvitations). 
    # @param invitation_id 
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_invitation_tags_with_http_info(invitation_id, tags, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.put_invitation_tags ...'
      end
      # verify the required parameter 'invitation_id' is set
      if invitation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_id' when calling InvitationsApi.put_invitation_tags"
      end
      # verify the required parameter 'tags' is set
      if tags.nil?
        fail ArgumentError, "Missing the required parameter 'tags' when calling InvitationsApi.put_invitation_tags"
      end
      # resource path
      local_var_path = '/invitations/{invitationId}/tags'.sub('{' + 'invitationId' + '}', invitation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tags)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#put_invitation_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add a group of tags to a group of Invitations 
    # Applies all of the provided tags on all of the provided invitations.  Both public and private invitations may be tagged via this operation.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetInvitations). 
    # @param batch Array of ids, and array of tags for bulk tag operations
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_invitation_tags_batch(batch, opts = {})
      put_invitation_tags_batch_with_http_info(batch, opts)
      nil
    end

    # Add a group of tags to a group of Invitations 
    # Applies all of the provided tags on all of the provided invitations.  Both public and private invitations may be tagged via this operation.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetInvitations). 
    # @param batch Array of ids, and array of tags for bulk tag operations
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_invitation_tags_batch_with_http_info(batch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.put_invitation_tags_batch ...'
      end
      # verify the required parameter 'batch' is set
      if batch.nil?
        fail ArgumentError, "Missing the required parameter 'batch' when calling InvitationsApi.put_invitation_tags_batch"
      end
      # resource path
      local_var_path = '/invitations/tags'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(batch)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#put_invitation_tags_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update information about a Private Invitation 
    # Updates information about the private invitation, such as the expiration date and registration cap.  Only non-null values that are provided will be updated. 
    # @param invitation_id 
    # @param invitation_update_schema Object with values to be updated.  Any value not specified above will be ignored. 
    # @param [Hash] opts the optional parameters
    # @return [PrivateInvitationSchema]
    def update_private_invitation(invitation_id, invitation_update_schema, opts = {})
      data, _status_code, _headers = update_private_invitation_with_http_info(invitation_id, invitation_update_schema, opts)
      data
    end

    # Update information about a Private Invitation 
    # Updates information about the private invitation, such as the expiration date and registration cap.  Only non-null values that are provided will be updated. 
    # @param invitation_id 
    # @param invitation_update_schema Object with values to be updated.  Any value not specified above will be ignored. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrivateInvitationSchema, Fixnum, Hash)>] PrivateInvitationSchema data, response status code and response headers
    def update_private_invitation_with_http_info(invitation_id, invitation_update_schema, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.update_private_invitation ...'
      end
      # verify the required parameter 'invitation_id' is set
      if invitation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_id' when calling InvitationsApi.update_private_invitation"
      end
      # verify the required parameter 'invitation_update_schema' is set
      if invitation_update_schema.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_update_schema' when calling InvitationsApi.update_private_invitation"
      end
      # resource path
      local_var_path = '/invitations/private/{invitationId}'.sub('{' + 'invitationId' + '}', invitation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(invitation_update_schema)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PrivateInvitationSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#update_private_invitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update information about a Public Invitation 
    # Updates information about the public invitation, such as the expiration date and registration cap.  Only non-null values that are provided will be updated. 
    # @param invitation_id 
    # @param invitation_update_schema Object with values to be updated.  Any value not specified above will be ignored. 
    # @param [Hash] opts the optional parameters
    # @return [PublicInvitationSchema]
    def update_public_invitation(invitation_id, invitation_update_schema, opts = {})
      data, _status_code, _headers = update_public_invitation_with_http_info(invitation_id, invitation_update_schema, opts)
      data
    end

    # Update information about a Public Invitation 
    # Updates information about the public invitation, such as the expiration date and registration cap.  Only non-null values that are provided will be updated. 
    # @param invitation_id 
    # @param invitation_update_schema Object with values to be updated.  Any value not specified above will be ignored. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PublicInvitationSchema, Fixnum, Hash)>] PublicInvitationSchema data, response status code and response headers
    def update_public_invitation_with_http_info(invitation_id, invitation_update_schema, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.update_public_invitation ...'
      end
      # verify the required parameter 'invitation_id' is set
      if invitation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_id' when calling InvitationsApi.update_public_invitation"
      end
      # verify the required parameter 'invitation_update_schema' is set
      if invitation_update_schema.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_update_schema' when calling InvitationsApi.update_public_invitation"
      end
      # resource path
      local_var_path = '/invitations/public/{invitationId}'.sub('{' + 'invitationId' + '}', invitation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(invitation_update_schema)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublicInvitationSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#update_public_invitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
